
CpE 3150 Proj 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000035e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003c  00800100  00800100  000003d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000404  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e5b  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b4f  00000000  00000000  000012df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000601  00000000  00000000  00001e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00002430  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000573  00000000  00000000  00002494  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000015e  00000000  00000000  00002a07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002b65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	ac 33       	cpi	r26, 0x3C	; 60
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 3a 01 	call	0x274	; 0x274 <main>
  cc:	0c 94 ad 01 	jmp	0x35a	; 0x35a <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <beep>:
{
    
}*/

void beep() {
    DDRC |= 0b01000000;
  d4:	87 b1       	in	r24, 0x07	; 7
  d6:	80 64       	ori	r24, 0x40	; 64
  d8:	87 b9       	out	0x07, r24	; 7
    TCNT0 = -0xFF;
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	86 bd       	out	0x26, r24	; 38
    TCCR0B = 0b00000101;
  de:	85 e0       	ldi	r24, 0x05	; 5
  e0:	85 bd       	out	0x25, r24	; 37
    
    while(!(TIFR0 & (1<<TOV0))){
  e2:	0a c0       	rjmp	.+20     	; 0xf8 <beep+0x24>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	8f ec       	ldi	r24, 0xCF	; 207
  e6:	97 e0       	ldi	r25, 0x07	; 7
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <beep+0x14>
  ec:	00 c0       	rjmp	.+0      	; 0xee <beep+0x1a>
  ee:	00 00       	nop
        _delay_ms(1);
        PORTC ^= 0b01000000;    
  f0:	98 b1       	in	r25, 0x08	; 8
  f2:	80 e4       	ldi	r24, 0x40	; 64
  f4:	89 27       	eor	r24, r25
  f6:	88 b9       	out	0x08, r24	; 8
void beep() {
    DDRC |= 0b01000000;
    TCNT0 = -0xFF;
    TCCR0B = 0b00000101;
    
    while(!(TIFR0 & (1<<TOV0))){
  f8:	a8 9b       	sbis	0x15, 0	; 21
  fa:	f4 cf       	rjmp	.-24     	; 0xe4 <beep+0x10>
        _delay_ms(1);
        PORTC ^= 0b01000000;    
    }
    TCCR0B = 0x00;
  fc:	15 bc       	out	0x25, r1	; 37
    TIFR0 = 1<<TOV0;
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	85 bb       	out	0x15, r24	; 21
 102:	08 95       	ret

00000104 <set_all_pixels>:
}


void set_all_pixels(unsigned red, unsigned green, unsigned blue) // pixel setter
{
	for (int i = 0; i < 10; i++)
 104:	20 e0       	ldi	r18, 0x00	; 0
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	11 c0       	rjmp	.+34     	; 0x12c <set_all_pixels+0x28>
	{
		neopixel_arr[i].red = red;
 10a:	f9 01       	movw	r30, r18
 10c:	ee 0f       	add	r30, r30
 10e:	ff 1f       	adc	r31, r31
 110:	e2 0f       	add	r30, r18
 112:	f3 1f       	adc	r31, r19
 114:	ee 0f       	add	r30, r30
 116:	ff 1f       	adc	r31, r31
 118:	e0 50       	subi	r30, 0x00	; 0
 11a:	ff 4f       	sbci	r31, 0xFF	; 255
 11c:	91 83       	std	Z+1, r25	; 0x01
 11e:	80 83       	st	Z, r24
		neopixel_arr[i].green = green;
 120:	73 83       	std	Z+3, r23	; 0x03
 122:	62 83       	std	Z+2, r22	; 0x02
		neopixel_arr[i].blue = blue;
 124:	55 83       	std	Z+5, r21	; 0x05
 126:	44 83       	std	Z+4, r20	; 0x04
}


void set_all_pixels(unsigned red, unsigned green, unsigned blue) // pixel setter
{
	for (int i = 0; i < 10; i++)
 128:	2f 5f       	subi	r18, 0xFF	; 255
 12a:	3f 4f       	sbci	r19, 0xFF	; 255
 12c:	2a 30       	cpi	r18, 0x0A	; 10
 12e:	31 05       	cpc	r19, r1
 130:	64 f3       	brlt	.-40     	; 0x10a <set_all_pixels+0x6>
		neopixel_arr[i].red = red;
		neopixel_arr[i].green = green;
		neopixel_arr[i].blue = blue;
	}
	return;
}
 132:	08 95       	ret

00000134 <enable_pixels>:

void enable_pixels() // sends bit values to the NeoPixels
{
	for (int i = 0; i < 10; i++)
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	88 c0       	rjmp	.+272    	; 0x24a <enable_pixels+0x116>
	{
		for (int b = 7; b >= 0; b--)
		{
			send_bit(neopixel_arr[i].green >> b);
 13a:	fc 01       	movw	r30, r24
 13c:	ee 0f       	add	r30, r30
 13e:	ff 1f       	adc	r31, r31
 140:	e8 0f       	add	r30, r24
 142:	f9 1f       	adc	r31, r25
 144:	ee 0f       	add	r30, r30
 146:	ff 1f       	adc	r31, r31
 148:	e0 50       	subi	r30, 0x00	; 0
 14a:	ff 4f       	sbci	r31, 0xFF	; 255
 14c:	42 81       	ldd	r20, Z+2	; 0x02
 14e:	53 81       	ldd	r21, Z+3	; 0x03
 150:	02 2e       	mov	r0, r18
 152:	02 c0       	rjmp	.+4      	; 0x158 <enable_pixels+0x24>
 154:	56 95       	lsr	r21
 156:	47 95       	ror	r20
 158:	0a 94       	dec	r0
 15a:	e2 f7       	brpl	.-8      	; 0x154 <enable_pixels+0x20>

// neopixel garbage
static inline void send_bit(unsigned bit) // function that handles bit sending
{
	int is_on = bit & 1;
	if (is_on)
 15c:	40 ff       	sbrs	r20, 0
 15e:	0a c0       	rjmp	.+20     	; 0x174 <enable_pixels+0x40>
	{
		PORTB |= 0b00000001;
 160:	45 b1       	in	r20, 0x05	; 5
 162:	41 60       	ori	r20, 0x01	; 1
 164:	45 b9       	out	0x05, r20	; 5
		_NOP();
 166:	00 00       	nop
		_NOP();
 168:	00 00       	nop
		_NOP();
 16a:	00 00       	nop
		PORTB &= 0b11111110;
 16c:	45 b1       	in	r20, 0x05	; 5
 16e:	4e 7f       	andi	r20, 0xFE	; 254
 170:	45 b9       	out	0x05, r20	; 5
 172:	09 c0       	rjmp	.+18     	; 0x186 <enable_pixels+0x52>
	}
	else
	{
		PORTB |= 0b00000001;
 174:	45 b1       	in	r20, 0x05	; 5
 176:	41 60       	ori	r20, 0x01	; 1
 178:	45 b9       	out	0x05, r20	; 5
		PORTB &= 0b11111110;
 17a:	45 b1       	in	r20, 0x05	; 5
 17c:	4e 7f       	andi	r20, 0xFE	; 254
 17e:	45 b9       	out	0x05, r20	; 5
		_NOP();
 180:	00 00       	nop
		_NOP();
 182:	00 00       	nop
		_NOP();
 184:	00 00       	nop

void enable_pixels() // sends bit values to the NeoPixels
{
	for (int i = 0; i < 10; i++)
	{
		for (int b = 7; b >= 0; b--)
 186:	21 50       	subi	r18, 0x01	; 1
 188:	31 09       	sbc	r19, r1
 18a:	02 c0       	rjmp	.+4      	; 0x190 <enable_pixels+0x5c>
 18c:	27 e0       	ldi	r18, 0x07	; 7
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	33 23       	and	r19, r19
 192:	9c f6       	brge	.-90     	; 0x13a <enable_pixels+0x6>
 194:	27 e0       	ldi	r18, 0x07	; 7
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	28 c0       	rjmp	.+80     	; 0x1ea <enable_pixels+0xb6>
		{
			send_bit(neopixel_arr[i].green >> b);
		}
		for (int b = 7; b >= 0; b--)
		{
			send_bit(neopixel_arr[i].red >> b);
 19a:	fc 01       	movw	r30, r24
 19c:	ee 0f       	add	r30, r30
 19e:	ff 1f       	adc	r31, r31
 1a0:	e8 0f       	add	r30, r24
 1a2:	f9 1f       	adc	r31, r25
 1a4:	ee 0f       	add	r30, r30
 1a6:	ff 1f       	adc	r31, r31
 1a8:	e0 50       	subi	r30, 0x00	; 0
 1aa:	ff 4f       	sbci	r31, 0xFF	; 255
 1ac:	40 81       	ld	r20, Z
 1ae:	51 81       	ldd	r21, Z+1	; 0x01
 1b0:	02 2e       	mov	r0, r18
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <enable_pixels+0x84>
 1b4:	56 95       	lsr	r21
 1b6:	47 95       	ror	r20
 1b8:	0a 94       	dec	r0
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <enable_pixels+0x80>

// neopixel garbage
static inline void send_bit(unsigned bit) // function that handles bit sending
{
	int is_on = bit & 1;
	if (is_on)
 1bc:	40 ff       	sbrs	r20, 0
 1be:	0a c0       	rjmp	.+20     	; 0x1d4 <enable_pixels+0xa0>
	{
		PORTB |= 0b00000001;
 1c0:	45 b1       	in	r20, 0x05	; 5
 1c2:	41 60       	ori	r20, 0x01	; 1
 1c4:	45 b9       	out	0x05, r20	; 5
		_NOP();
 1c6:	00 00       	nop
		_NOP();
 1c8:	00 00       	nop
		_NOP();
 1ca:	00 00       	nop
		PORTB &= 0b11111110;
 1cc:	45 b1       	in	r20, 0x05	; 5
 1ce:	4e 7f       	andi	r20, 0xFE	; 254
 1d0:	45 b9       	out	0x05, r20	; 5
 1d2:	09 c0       	rjmp	.+18     	; 0x1e6 <enable_pixels+0xb2>
	}
	else
	{
		PORTB |= 0b00000001;
 1d4:	45 b1       	in	r20, 0x05	; 5
 1d6:	41 60       	ori	r20, 0x01	; 1
 1d8:	45 b9       	out	0x05, r20	; 5
		PORTB &= 0b11111110;
 1da:	45 b1       	in	r20, 0x05	; 5
 1dc:	4e 7f       	andi	r20, 0xFE	; 254
 1de:	45 b9       	out	0x05, r20	; 5
		_NOP();
 1e0:	00 00       	nop
		_NOP();
 1e2:	00 00       	nop
		_NOP();
 1e4:	00 00       	nop
	{
		for (int b = 7; b >= 0; b--)
		{
			send_bit(neopixel_arr[i].green >> b);
		}
		for (int b = 7; b >= 0; b--)
 1e6:	21 50       	subi	r18, 0x01	; 1
 1e8:	31 09       	sbc	r19, r1
 1ea:	33 23       	and	r19, r19
 1ec:	b4 f6       	brge	.-84     	; 0x19a <enable_pixels+0x66>
 1ee:	27 e0       	ldi	r18, 0x07	; 7
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	28 c0       	rjmp	.+80     	; 0x244 <enable_pixels+0x110>
		{
			send_bit(neopixel_arr[i].red >> b);
		}
		for (int b = 7; b >= 0; b--)
		{
			send_bit(neopixel_arr[i].blue >> b);
 1f4:	fc 01       	movw	r30, r24
 1f6:	ee 0f       	add	r30, r30
 1f8:	ff 1f       	adc	r31, r31
 1fa:	e8 0f       	add	r30, r24
 1fc:	f9 1f       	adc	r31, r25
 1fe:	ee 0f       	add	r30, r30
 200:	ff 1f       	adc	r31, r31
 202:	e0 50       	subi	r30, 0x00	; 0
 204:	ff 4f       	sbci	r31, 0xFF	; 255
 206:	44 81       	ldd	r20, Z+4	; 0x04
 208:	55 81       	ldd	r21, Z+5	; 0x05
 20a:	02 2e       	mov	r0, r18
 20c:	02 c0       	rjmp	.+4      	; 0x212 <enable_pixels+0xde>
 20e:	56 95       	lsr	r21
 210:	47 95       	ror	r20
 212:	0a 94       	dec	r0
 214:	e2 f7       	brpl	.-8      	; 0x20e <enable_pixels+0xda>

// neopixel garbage
static inline void send_bit(unsigned bit) // function that handles bit sending
{
	int is_on = bit & 1;
	if (is_on)
 216:	40 ff       	sbrs	r20, 0
 218:	0a c0       	rjmp	.+20     	; 0x22e <enable_pixels+0xfa>
	{
		PORTB |= 0b00000001;
 21a:	45 b1       	in	r20, 0x05	; 5
 21c:	41 60       	ori	r20, 0x01	; 1
 21e:	45 b9       	out	0x05, r20	; 5
		_NOP();
 220:	00 00       	nop
		_NOP();
 222:	00 00       	nop
		_NOP();
 224:	00 00       	nop
		PORTB &= 0b11111110;
 226:	45 b1       	in	r20, 0x05	; 5
 228:	4e 7f       	andi	r20, 0xFE	; 254
 22a:	45 b9       	out	0x05, r20	; 5
 22c:	09 c0       	rjmp	.+18     	; 0x240 <enable_pixels+0x10c>
	}
	else
	{
		PORTB |= 0b00000001;
 22e:	45 b1       	in	r20, 0x05	; 5
 230:	41 60       	ori	r20, 0x01	; 1
 232:	45 b9       	out	0x05, r20	; 5
		PORTB &= 0b11111110;
 234:	45 b1       	in	r20, 0x05	; 5
 236:	4e 7f       	andi	r20, 0xFE	; 254
 238:	45 b9       	out	0x05, r20	; 5
		_NOP();
 23a:	00 00       	nop
		_NOP();
 23c:	00 00       	nop
		_NOP();
 23e:	00 00       	nop
		}
		for (int b = 7; b >= 0; b--)
		{
			send_bit(neopixel_arr[i].red >> b);
		}
		for (int b = 7; b >= 0; b--)
 240:	21 50       	subi	r18, 0x01	; 1
 242:	31 09       	sbc	r19, r1
 244:	33 23       	and	r19, r19
 246:	b4 f6       	brge	.-84     	; 0x1f4 <enable_pixels+0xc0>
	return;
}

void enable_pixels() // sends bit values to the NeoPixels
{
	for (int i = 0; i < 10; i++)
 248:	01 96       	adiw	r24, 0x01	; 1
 24a:	8a 30       	cpi	r24, 0x0A	; 10
 24c:	91 05       	cpc	r25, r1
 24e:	0c f4       	brge	.+2      	; 0x252 <enable_pixels+0x11e>
 250:	9d cf       	rjmp	.-198    	; 0x18c <enable_pixels+0x58>
		{
			send_bit(neopixel_arr[i].blue >> b);
		}
	}
	return;
}
 252:	08 95       	ret

00000254 <delay_15ms_ctc>:


void delay_15ms_ctc()
{
	OCR0B = 0x75;
 254:	85 e7       	ldi	r24, 0x75	; 117
 256:	88 bd       	out	0x28, r24	; 40
	TCNT0 = 0x00;
 258:	16 bc       	out	0x26, r1	; 38
	TCCR0B = (TCCR0B & 0x00) | (1<<CS02) | (1<<CS00);
 25a:	85 b5       	in	r24, 0x25	; 37
 25c:	85 e0       	ldi	r24, 0x05	; 5
 25e:	85 bd       	out	0x25, r24	; 37
	while((TIFR0 & (1<<OCF0B)) == 0);
 260:	aa 9b       	sbis	0x15, 2	; 21
 262:	fe cf       	rjmp	.-4      	; 0x260 <delay_15ms_ctc+0xc>
	TCCR0B &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));
 264:	85 b5       	in	r24, 0x25	; 37
 266:	88 7f       	andi	r24, 0xF8	; 248
 268:	85 bd       	out	0x25, r24	; 37
	TIFR0 |= 1<<OCF1A;
 26a:	85 b3       	in	r24, 0x15	; 21
 26c:	82 60       	ori	r24, 0x02	; 2
 26e:	85 bb       	out	0x15, r24	; 21
	TCNT0 = 0;
 270:	16 bc       	out	0x26, r1	; 38
 272:	08 95       	ret

00000274 <main>:
struct rgb neopixel_arr[10];
//void setpixcolor(int n, int r, int g, int b);

int main(void)
{
	DDRB |= (1 << 0); // sets portB.0 to output
 274:	84 b1       	in	r24, 0x04	; 4
 276:	81 60       	ori	r24, 0x01	; 1
 278:	84 b9       	out	0x04, r24	; 4
	set_all_pixels(0,0,0); // pixels set to 0 (off)
 27a:	40 e0       	ldi	r20, 0x00	; 0
 27c:	50 e0       	ldi	r21, 0x00	; 0
 27e:	60 e0       	ldi	r22, 0x00	; 0
 280:	70 e0       	ldi	r23, 0x00	; 0
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 82 00 	call	0x104	; 0x104 <set_all_pixels>
	enable_pixels();	// zero value output
 28a:	0e 94 9a 00 	call	0x134	; 0x134 <enable_pixels>
	int brightness = 0;
	while(1)
    {
        TCNT1H = -0xF4;
 28e:	8c e0       	ldi	r24, 0x0C	; 12
 290:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
        TCNT1L = 0x24;
 294:	84 e2       	ldi	r24, 0x24	; 36
 296:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
        TCCR1B = 0b00000100;
 29a:	84 e0       	ldi	r24, 0x04	; 4
 29c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		brightness = 0;
 2a0:	00 e0       	ldi	r16, 0x00	; 0
 2a2:	10 e0       	ldi	r17, 0x00	; 0
        while(!(TIFR1 & (1<<TOV1))) //2 second timer
 2a4:	32 c0       	rjmp	.+100    	; 0x30a <main+0x96>
        {
			//if(brightness >255)
				//brightness = 0;
            TCNT3H = -0x30;
 2a6:	80 ed       	ldi	r24, 0xD0	; 208
 2a8:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7f8095>
            TCNT3L = 0xD4;
 2ac:	84 ed       	ldi	r24, 0xD4	; 212
 2ae:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__TEXT_REGION_LENGTH__+0x7f8094>
            TCCR3B = 0b00000011;
 2b2:	83 e0       	ldi	r24, 0x03	; 3
 2b4:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f8091>
            while (!(TIFR3 & (1<<TOV3))) //.1 second timer
 2b8:	17 c0       	rjmp	.+46     	; 0x2e8 <main+0x74>
            {
                if(PIND & (1<<4)) // button get pressed
 2ba:	4c 9b       	sbis	0x09, 4	; 9
 2bc:	15 c0       	rjmp	.+42     	; 0x2e8 <main+0x74>
                {
                    int hold_low = TCNT1L;
 2be:	c0 91 84 00 	lds	r28, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                    int hold_high = TCNT1H;
 2c2:	d0 91 85 00 	lds	r29, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
                    beep(); // beep time
 2c6:	0e 94 6a 00 	call	0xd4	; 0xd4 <beep>
                    while(PIND & (1<<4)); // waiting for button depress
 2ca:	4c 99       	sbic	0x09, 4	; 9
 2cc:	fe cf       	rjmp	.-4      	; 0x2ca <main+0x56>
 2ce:	06 c0       	rjmp	.+12     	; 0x2dc <main+0x68>
                    
                    while (!(PIND & (1<<4)))
                    {
						TCNT1H = hold_high;
 2d0:	d0 93 85 00 	sts	0x0085, r29	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
						TCNT1L = hold_low;
 2d4:	c0 93 84 00 	sts	0x0084, r28	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
						TIFR1 = 1<<TOV1;
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	86 bb       	out	0x16, r24	; 22
                    int hold_low = TCNT1L;
                    int hold_high = TCNT1H;
                    beep(); // beep time
                    while(PIND & (1<<4)); // waiting for button depress
                    
                    while (!(PIND & (1<<4)))
 2dc:	4c 9b       	sbis	0x09, 4	; 9
 2de:	f8 cf       	rjmp	.-16     	; 0x2d0 <main+0x5c>
                    {
						TCNT1H = hold_high;
						TCNT1L = hold_low;
						TIFR1 = 1<<TOV1;
                    }
					beep();
 2e0:	0e 94 6a 00 	call	0xd4	; 0xd4 <beep>
					while(PIND & (1<<4));
 2e4:	4c 99       	sbic	0x09, 4	; 9
 2e6:	fe cf       	rjmp	.-4      	; 0x2e4 <main+0x70>
			//if(brightness >255)
				//brightness = 0;
            TCNT3H = -0x30;
            TCNT3L = 0xD4;
            TCCR3B = 0b00000011;
            while (!(TIFR3 & (1<<TOV3))) //.1 second timer
 2e8:	c0 9b       	sbis	0x18, 0	; 24
 2ea:	e7 cf       	rjmp	.-50     	; 0x2ba <main+0x46>
                    }
					beep();
					while(PIND & (1<<4));
                }
            }
			set_all_pixels(brightness,0,0);
 2ec:	40 e0       	ldi	r20, 0x00	; 0
 2ee:	50 e0       	ldi	r21, 0x00	; 0
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	70 e0       	ldi	r23, 0x00	; 0
 2f4:	c8 01       	movw	r24, r16
 2f6:	0e 94 82 00 	call	0x104	; 0x104 <set_all_pixels>
			enable_pixels();
 2fa:	0e 94 9a 00 	call	0x134	; 0x134 <enable_pixels>
			brightness += 13;
 2fe:	03 5f       	subi	r16, 0xF3	; 243
 300:	1f 4f       	sbci	r17, 0xFF	; 255
            TCCR3B = 0x00;
 302:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f8091>
            TIFR3 = 1<<TOV3;
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	88 bb       	out	0x18, r24	; 24
    {
        TCNT1H = -0xF4;
        TCNT1L = 0x24;
        TCCR1B = 0b00000100;
		brightness = 0;
        while(!(TIFR1 & (1<<TOV1))) //2 second timer
 30a:	b0 9b       	sbis	0x16, 0	; 22
 30c:	cc cf       	rjmp	.-104    	; 0x2a6 <main+0x32>
			enable_pixels();
			brightness += 13;
            TCCR3B = 0x00;
            TIFR3 = 1<<TOV3;
        }
        TCCR1B = 0x00;
 30e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
        TIFR1 = 1<<TOV1;
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	86 bb       	out	0x16, r24	; 22

        beep(); // makes speaker go brrrrrrrrr
 316:	0e 94 6a 00 	call	0xd4	; 0xd4 <beep>
		for(int i = 0; i<10; i ++) // strobe
 31a:	c0 e0       	ldi	r28, 0x00	; 0
 31c:	d0 e0       	ldi	r29, 0x00	; 0
 31e:	19 c0       	rjmp	.+50     	; 0x352 <main+0xde>
		{
			set_all_pixels(0,0,0);
 320:	40 e0       	ldi	r20, 0x00	; 0
 322:	50 e0       	ldi	r21, 0x00	; 0
 324:	60 e0       	ldi	r22, 0x00	; 0
 326:	70 e0       	ldi	r23, 0x00	; 0
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 82 00 	call	0x104	; 0x104 <set_all_pixels>
			enable_pixels();
 330:	0e 94 9a 00 	call	0x134	; 0x134 <enable_pixels>
			delay_15ms_ctc();
 334:	0e 94 2a 01 	call	0x254	; 0x254 <delay_15ms_ctc>
			set_all_pixels(255,0,0);
 338:	40 e0       	ldi	r20, 0x00	; 0
 33a:	50 e0       	ldi	r21, 0x00	; 0
 33c:	60 e0       	ldi	r22, 0x00	; 0
 33e:	70 e0       	ldi	r23, 0x00	; 0
 340:	8f ef       	ldi	r24, 0xFF	; 255
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 82 00 	call	0x104	; 0x104 <set_all_pixels>
			enable_pixels();	
 348:	0e 94 9a 00 	call	0x134	; 0x134 <enable_pixels>
			delay_15ms_ctc();
 34c:	0e 94 2a 01 	call	0x254	; 0x254 <delay_15ms_ctc>
        }
        TCCR1B = 0x00;
        TIFR1 = 1<<TOV1;

        beep(); // makes speaker go brrrrrrrrr
		for(int i = 0; i<10; i ++) // strobe
 350:	21 96       	adiw	r28, 0x01	; 1
 352:	ca 30       	cpi	r28, 0x0A	; 10
 354:	d1 05       	cpc	r29, r1
 356:	24 f3       	brlt	.-56     	; 0x320 <main+0xac>
 358:	9a cf       	rjmp	.-204    	; 0x28e <main+0x1a>

0000035a <_exit>:
 35a:	f8 94       	cli

0000035c <__stop_program>:
 35c:	ff cf       	rjmp	.-2      	; 0x35c <__stop_program>
