
Part1C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000304  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000106  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800100  00800100  00000304  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000333  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e6a  00000000  00000000  00000373  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ac4  00000000  00000000  000011dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004cb  00000000  00000000  00001ca1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  0000216c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037c  00000000  00000000  000021dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000011f  00000000  00000000  00002558  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00002677  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000028c  0000028c  00000300  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000026a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.send_pixel 000000cc  00000106  00000106  0000017a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.update_pixels 0000002e  00000228  00000228  0000029c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.neopixel_init 00000056  000001d2  000001d2  00000246  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.clear_pixels 0000001c  00000256  00000256  000002ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.main    0000001a  00000272  00000272  000002e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__ctors_end>
   4:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
   8:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
   c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
  10:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
  14:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
  18:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
  1c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
  20:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
  24:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
  28:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
  2c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
  30:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
  34:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
  38:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
  3c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
  40:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
  44:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
  48:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
  4c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
  50:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
  54:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
  58:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
  5c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
  60:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
  64:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
  68:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
  6c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
  70:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
  74:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
  78:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
  7c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
  80:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
  84:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
  88:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
  8c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
  90:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
  94:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
  98:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
  9c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
  a0:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
  a4:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
  a8:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>

000000ac <.dinit>:
  ac:	01 00       	.word	0x0001	; ????
  ae:	01 1e       	adc	r0, r17
  b0:	80 00       	.word	0x0080	; ????

000000b2 <__ctors_end>:
  b2:	11 24       	eor	r1, r1
  b4:	1f be       	out	0x3f, r1	; 63
  b6:	cf ef       	ldi	r28, 0xFF	; 255
  b8:	da e0       	ldi	r29, 0x0A	; 10
  ba:	de bf       	out	0x3e, r29	; 62
  bc:	cd bf       	out	0x3d, r28	; 61

000000be <__do_copy_data>:
  be:	ec ea       	ldi	r30, 0xAC	; 172
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	17 c0       	rjmp	.+46     	; 0xf4 <__do_clear_bss+0x8>
  c6:	b5 91       	lpm	r27, Z+
  c8:	a5 91       	lpm	r26, Z+
  ca:	35 91       	lpm	r19, Z+
  cc:	25 91       	lpm	r18, Z+
  ce:	05 91       	lpm	r16, Z+
  d0:	07 fd       	sbrc	r16, 7
  d2:	0c c0       	rjmp	.+24     	; 0xec <__do_clear_bss>
  d4:	95 91       	lpm	r25, Z+
  d6:	85 91       	lpm	r24, Z+
  d8:	ef 01       	movw	r28, r30
  da:	f9 2f       	mov	r31, r25
  dc:	e8 2f       	mov	r30, r24
  de:	05 90       	lpm	r0, Z+
  e0:	0d 92       	st	X+, r0
  e2:	a2 17       	cp	r26, r18
  e4:	b3 07       	cpc	r27, r19
  e6:	d9 f7       	brne	.-10     	; 0xde <__do_copy_data+0x20>
  e8:	fe 01       	movw	r30, r28
  ea:	04 c0       	rjmp	.+8      	; 0xf4 <__do_clear_bss+0x8>

000000ec <__do_clear_bss>:
  ec:	1d 92       	st	X+, r1
  ee:	a2 17       	cp	r26, r18
  f0:	b3 07       	cpc	r27, r19
  f2:	e1 f7       	brne	.-8      	; 0xec <__do_clear_bss>
  f4:	e1 3b       	cpi	r30, 0xB1	; 177
  f6:	f4 07       	cpc	r31, r20
  f8:	31 f7       	brne	.-52     	; 0xc6 <__do_copy_data+0x8>
  fa:	0e 94 39 01 	call	0x272	; 0x272 <main>
  fe:	0c 94 81 00 	jmp	0x102	; 0x102 <_exit>

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>

Disassembly of section .text:

0000028c <__bad_interrupt>:
 28c:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.send_pixel:

00000106 <send_pixel>:
}

// send RGB for a single NeoPixel
void send_pixel(unsigned char red, unsigned char green, unsigned char blue)
{
	for(int i = 7; i >= 0; i--) // Loop for each bit in the Green Byte
 106:	27 e0       	ldi	r18, 0x07	; 7
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	1d c0       	rjmp	.+58     	; 0x146 <send_pixel+0x40>
	{
		if(green & (1<<i)) // Send a 1
 10c:	e6 2f       	mov	r30, r22
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	02 2e       	mov	r0, r18
 112:	02 c0       	rjmp	.+4      	; 0x118 <send_pixel+0x12>
 114:	f5 95       	asr	r31
 116:	e7 95       	ror	r30
 118:	0a 94       	dec	r0
 11a:	e2 f7       	brpl	.-8      	; 0x114 <send_pixel+0xe>
 11c:	e0 ff       	sbrs	r30, 0
 11e:	09 c0       	rjmp	.+18     	; 0x132 <send_pixel+0x2c>
		{
			PORTB |= (1<<0); // Set PB0
 120:	95 b1       	in	r25, 0x05	; 5
 122:	91 60       	ori	r25, 0x01	; 1
 124:	95 b9       	out	0x05, r25	; 5
			_NOP();
 126:	00 00       	nop
			_NOP();
 128:	00 00       	nop
			_NOP();
 12a:	00 00       	nop
			PORTB &= 0; // Clear PB0
 12c:	95 b1       	in	r25, 0x05	; 5
 12e:	15 b8       	out	0x05, r1	; 5
 130:	08 c0       	rjmp	.+16     	; 0x142 <send_pixel+0x3c>
		}
		else // Send a 0
		{
			PORTB |= (1<<0); // Set PB0
 132:	95 b1       	in	r25, 0x05	; 5
 134:	91 60       	ori	r25, 0x01	; 1
 136:	95 b9       	out	0x05, r25	; 5
			PORTB &= 0; // Clear PB0
 138:	95 b1       	in	r25, 0x05	; 5
 13a:	15 b8       	out	0x05, r1	; 5
			_NOP();
 13c:	00 00       	nop
			_NOP();
 13e:	00 00       	nop
			_NOP();
 140:	00 00       	nop
}

// send RGB for a single NeoPixel
void send_pixel(unsigned char red, unsigned char green, unsigned char blue)
{
	for(int i = 7; i >= 0; i--) // Loop for each bit in the Green Byte
 142:	21 50       	subi	r18, 0x01	; 1
 144:	31 09       	sbc	r19, r1
 146:	33 23       	and	r19, r19
 148:	0c f7       	brge	.-62     	; 0x10c <send_pixel+0x6>
 14a:	27 e0       	ldi	r18, 0x07	; 7
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	1d c0       	rjmp	.+58     	; 0x18a <send_pixel+0x84>
		}
	}

	for(int i = 7; i >= 0; i--) // Loop for each bit in the Red Byte
	{
		if(red & (1<<i))// Send a 1
 150:	68 2f       	mov	r22, r24
 152:	70 e0       	ldi	r23, 0x00	; 0
 154:	02 2e       	mov	r0, r18
 156:	02 c0       	rjmp	.+4      	; 0x15c <send_pixel+0x56>
 158:	75 95       	asr	r23
 15a:	67 95       	ror	r22
 15c:	0a 94       	dec	r0
 15e:	e2 f7       	brpl	.-8      	; 0x158 <send_pixel+0x52>
 160:	60 ff       	sbrs	r22, 0
 162:	09 c0       	rjmp	.+18     	; 0x176 <send_pixel+0x70>
		{
			PORTB |= (1<<0); // Set PB0
 164:	95 b1       	in	r25, 0x05	; 5
 166:	91 60       	ori	r25, 0x01	; 1
 168:	95 b9       	out	0x05, r25	; 5
			_NOP();
 16a:	00 00       	nop
			_NOP();
 16c:	00 00       	nop
			_NOP();
 16e:	00 00       	nop
			PORTB &= 0; // Clear PB0
 170:	95 b1       	in	r25, 0x05	; 5
 172:	15 b8       	out	0x05, r1	; 5
 174:	08 c0       	rjmp	.+16     	; 0x186 <send_pixel+0x80>
		}
		else // Send a 0
		{
			PORTB |= (1<<0); // Set PB0
 176:	95 b1       	in	r25, 0x05	; 5
 178:	91 60       	ori	r25, 0x01	; 1
 17a:	95 b9       	out	0x05, r25	; 5
			PORTB &= 0; // Clear PB0
 17c:	95 b1       	in	r25, 0x05	; 5
 17e:	15 b8       	out	0x05, r1	; 5
			_NOP();
 180:	00 00       	nop
			_NOP();
 182:	00 00       	nop
			_NOP();
 184:	00 00       	nop
			_NOP();
			_NOP();
		}
	}

	for(int i = 7; i >= 0; i--) // Loop for each bit in the Red Byte
 186:	21 50       	subi	r18, 0x01	; 1
 188:	31 09       	sbc	r19, r1
 18a:	33 23       	and	r19, r19
 18c:	0c f7       	brge	.-62     	; 0x150 <send_pixel+0x4a>
 18e:	87 e0       	ldi	r24, 0x07	; 7
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	1c c0       	rjmp	.+56     	; 0x1cc <send_pixel+0xc6>
		}
	}

	for(int i = 7; i >= 0; i--) // Loop for each bit in the Blue Byte
	{
		if(blue & (1<<i))// Send a 1
 194:	24 2f       	mov	r18, r20
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	08 2e       	mov	r0, r24
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <send_pixel+0x9a>
 19c:	35 95       	asr	r19
 19e:	27 95       	ror	r18
 1a0:	0a 94       	dec	r0
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <send_pixel+0x96>
 1a4:	20 ff       	sbrs	r18, 0
 1a6:	09 c0       	rjmp	.+18     	; 0x1ba <send_pixel+0xb4>
		{
			PORTB |= (1<<0); // Set PB0
 1a8:	25 b1       	in	r18, 0x05	; 5
 1aa:	21 60       	ori	r18, 0x01	; 1
 1ac:	25 b9       	out	0x05, r18	; 5
			_NOP();
 1ae:	00 00       	nop
			_NOP();
 1b0:	00 00       	nop
			_NOP();
 1b2:	00 00       	nop
			PORTB &= 0; // Clear PB0
 1b4:	25 b1       	in	r18, 0x05	; 5
 1b6:	15 b8       	out	0x05, r1	; 5
 1b8:	08 c0       	rjmp	.+16     	; 0x1ca <send_pixel+0xc4>
		}
		else // Send a 0
		{
			PORTB |= (1<<0); // Set PB0
 1ba:	25 b1       	in	r18, 0x05	; 5
 1bc:	21 60       	ori	r18, 0x01	; 1
 1be:	25 b9       	out	0x05, r18	; 5
			PORTB &= 0; // Clear PB0
 1c0:	25 b1       	in	r18, 0x05	; 5
 1c2:	15 b8       	out	0x05, r1	; 5
			_NOP();
 1c4:	00 00       	nop
			_NOP();
 1c6:	00 00       	nop
			_NOP();
 1c8:	00 00       	nop
			_NOP();
			_NOP();
		}
	}

	for(int i = 7; i >= 0; i--) // Loop for each bit in the Blue Byte
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	99 23       	and	r25, r25
 1ce:	14 f7       	brge	.-60     	; 0x194 <send_pixel+0x8e>
			_NOP();
			_NOP();
		}
	}

}
 1d0:	08 95       	ret

Disassembly of section .text.update_pixels:

00000228 <update_pixels>:
	return;
}

// update all RGB NeoPixel values
void update_pixels()
{
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
	for (int i = 0; i < 9; i++) // Loop through for each NeoPixel
 22c:	c0 e0       	ldi	r28, 0x00	; 0
 22e:	d0 e0       	ldi	r29, 0x00	; 0
 230:	0c c0       	rjmp	.+24     	; 0x24a <update_pixels+0x22>
	{
		send_pixel(neo_arr.r[i], neo_arr.g[i], neo_arr.b[i]); // Send a single 24 bit value for RGB
 232:	fe 01       	movw	r30, r28
 234:	e0 50       	subi	r30, 0x00	; 0
 236:	ff 4f       	sbci	r31, 0xFF	; 255
 238:	44 89       	ldd	r20, Z+20	; 0x14
 23a:	62 85       	ldd	r22, Z+10	; 0x0a
 23c:	80 81       	ld	r24, Z
 23e:	50 e0       	ldi	r21, 0x00	; 0
 240:	70 e0       	ldi	r23, 0x00	; 0
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 83 00 	call	0x106	; 0x106 <__data_load_end>
}

// update all RGB NeoPixel values
void update_pixels()
{
	for (int i = 0; i < 9; i++) // Loop through for each NeoPixel
 248:	21 96       	adiw	r28, 0x01	; 1
 24a:	c9 30       	cpi	r28, 0x09	; 9
 24c:	d1 05       	cpc	r29, r1
 24e:	8c f3       	brlt	.-30     	; 0x232 <update_pixels+0xa>
	{
		send_pixel(neo_arr.r[i], neo_arr.g[i], neo_arr.b[i]); // Send a single 24 bit value for RGB
	}

	return;
}
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	08 95       	ret

Disassembly of section .text.neopixel_init:

000001d2 <neopixel_init>:
}

// initialize NeoPixels
void neopixel_init()
{
	DDRB |= 0x01; // Set PB0 to an input
 1d2:	84 b1       	in	r24, 0x04	; 4
 1d4:	81 60       	ori	r24, 0x01	; 1
 1d6:	84 b9       	out	0x04, r24	; 4
	PORTB &= 0; // Output 0x00 to PORTB
 1d8:	85 b1       	in	r24, 0x05	; 5
 1da:	15 b8       	out	0x05, r1	; 5
	neo_arr.r[0] = 0x30;
 1dc:	e0 e0       	ldi	r30, 0x00	; 0
 1de:	f1 e0       	ldi	r31, 0x01	; 1
 1e0:	20 e3       	ldi	r18, 0x30	; 48
 1e2:	20 83       	st	Z, r18
	neo_arr.g[0] = 0x00;
 1e4:	12 86       	std	Z+10, r1	; 0x0a
	neo_arr.b[0] = 0x00;
 1e6:	14 8a       	std	Z+20, r1	; 0x14
	neo_arr.r[1] = 0x30;
 1e8:	21 83       	std	Z+1, r18	; 0x01
	neo_arr.g[1] = 0x10;
 1ea:	80 e1       	ldi	r24, 0x10	; 16
 1ec:	83 87       	std	Z+11, r24	; 0x0b
	neo_arr.b[1] = 0x00;
 1ee:	15 8a       	std	Z+21, r1	; 0x15
	neo_arr.r[2] = 0x20;
 1f0:	90 e2       	ldi	r25, 0x20	; 32
 1f2:	92 83       	std	Z+2, r25	; 0x02
	neo_arr.g[2] = 0x20;
 1f4:	94 87       	std	Z+12, r25	; 0x0c
	neo_arr.b[2] = 0x00;
 1f6:	16 8a       	std	Z+22, r1	; 0x16
	neo_arr.r[3] = 0x10;
 1f8:	83 83       	std	Z+3, r24	; 0x03
	neo_arr.g[3] = 0x30;
 1fa:	25 87       	std	Z+13, r18	; 0x0d
	neo_arr.b[3] = 0x00;
 1fc:	17 8a       	std	Z+23, r1	; 0x17
	neo_arr.r[4] = 0x00;
 1fe:	14 82       	std	Z+4, r1	; 0x04
	neo_arr.g[4] = 0x30;
 200:	26 87       	std	Z+14, r18	; 0x0e
	neo_arr.b[4] = 0x10;
 202:	80 8f       	std	Z+24, r24	; 0x18
	neo_arr.r[5] = 0x00;
 204:	15 82       	std	Z+5, r1	; 0x05
	neo_arr.g[5] = 0x20;
 206:	97 87       	std	Z+15, r25	; 0x0f
	neo_arr.b[5] = 0x20;
 208:	91 8f       	std	Z+25, r25	; 0x19
	neo_arr.r[6] = 0x00;
 20a:	16 82       	std	Z+6, r1	; 0x06
	neo_arr.g[6] = 0x10;
 20c:	80 8b       	std	Z+16, r24	; 0x10
	neo_arr.b[6] = 0x30;
 20e:	22 8f       	std	Z+26, r18	; 0x1a
	neo_arr.r[7] = 0x00;
 210:	17 82       	std	Z+7, r1	; 0x07
	neo_arr.g[7] = 0x00;
 212:	11 8a       	std	Z+17, r1	; 0x11
	neo_arr.b[7] = 0x30;
 214:	23 8f       	std	Z+27, r18	; 0x1b
	neo_arr.r[8] = 0x10;
 216:	80 87       	std	Z+8, r24	; 0x08
	neo_arr.g[8] = 0x00;
 218:	12 8a       	std	Z+18, r1	; 0x12
	neo_arr.b[8] = 0x20;
 21a:	94 8f       	std	Z+28, r25	; 0x1c
	neo_arr.r[9] = 0x20;
 21c:	91 87       	std	Z+9, r25	; 0x09
	neo_arr.g[9] = 0x00;
 21e:	13 8a       	std	Z+19, r1	; 0x13
	neo_arr.b[9] = 0x10;
 220:	85 8f       	std	Z+29, r24	; 0x1d
	update_pixels(); // Initial NeoPixel Colors
 222:	0e 94 14 01 	call	0x228	; 0x228 <update_pixels>
 226:	08 95       	ret

Disassembly of section .text.clear_pixels:

00000256 <clear_pixels>:
}

// clears all NeoPixels
void clear_pixels()
{
	for(int i = 0; i < 10; i++) // Loop to clear each NeoPixel
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	07 c0       	rjmp	.+14     	; 0x26a <clear_pixels+0x14>
	{
		neo_arr.r[i] = 0x00;
 25c:	fc 01       	movw	r30, r24
 25e:	e0 50       	subi	r30, 0x00	; 0
 260:	ff 4f       	sbci	r31, 0xFF	; 255
 262:	10 82       	st	Z, r1
		neo_arr.g[i] = 0x00;
 264:	12 86       	std	Z+10, r1	; 0x0a
		neo_arr.b[i] = 0x00;
 266:	14 8a       	std	Z+20, r1	; 0x14
}

// clears all NeoPixels
void clear_pixels()
{
	for(int i = 0; i < 10; i++) // Loop to clear each NeoPixel
 268:	01 96       	adiw	r24, 0x01	; 1
 26a:	8a 30       	cpi	r24, 0x0A	; 10
 26c:	91 05       	cpc	r25, r1
 26e:	b4 f3       	brlt	.-20     	; 0x25c <clear_pixels+0x6>
		neo_arr.g[i] = 0x00;
		neo_arr.b[i] = 0x00;
	}

	return;
 270:	08 95       	ret

Disassembly of section .text.main:

00000272 <main>:
};
struct rgb neo_arr;

int main(void)
{
	neopixel_init();
 272:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <neopixel_init>
	int light_level = 25;
	int temp = 50;

	while(1)
	{
		clear_pixels();
 276:	0e 94 2b 01 	call	0x256	; 0x256 <clear_pixels>
			neo_arr.r[5] = 0;
			neo_arr.b[5] = 0;
			neo_arr.g[5] = 0x30;
		} else if (temp > 96) { // (97-...)
			// All red
			neo_arr.r[5] = 0x30;
 27a:	e0 e0       	ldi	r30, 0x00	; 0
 27c:	f1 e0       	ldi	r31, 0x01	; 1
 27e:	80 e3       	ldi	r24, 0x30	; 48
 280:	85 83       	std	Z+5, r24	; 0x05
			neo_arr.b[5] = 0;
 282:	11 8e       	std	Z+25, r1	; 0x19
			neo_arr.g[5] = 0;
 284:	17 86       	std	Z+15, r1	; 0x0f
		} else { // GT_64 (64-96)
			neo_arr.r[5] = (temp-64)*2;
			neo_arr.b[5] = (-temp+96)*2; 
			neo_arr.g[5] = 0;
		}
		update_pixels();
 286:	0e 94 14 01 	call	0x228	; 0x228 <update_pixels>
	}
 28a:	f5 cf       	rjmp	.-22     	; 0x276 <main+0x4>
