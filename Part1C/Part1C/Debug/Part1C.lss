
Part1C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000280  000002f4  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000108  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  00000323  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000e73  00000000  00000000  00000363  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000aac  00000000  00000000  000011d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000451  00000000  00000000  00001c82  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  000020d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000371  00000000  00000000  00002144  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000119  00000000  00000000  000024b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  000025ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  0000025e  0000025e  000002d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002600  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.send_pixel 000000cc  00000108  00000108  0000017c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.update_pixels 00000026  0000020c  0000020c  00000280  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.neopixel_init 00000010  0000024e  0000024e  000002c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.clear_pixels 0000001c  00000232  00000232  000002a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.main    00000038  000001d4  000001d4  00000248  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .data.neo_arr 0000001e  00800100  00000262  000002d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
   8:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
   c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  10:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  14:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  18:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  1c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  20:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  24:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  28:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  2c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  30:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  34:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  38:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  3c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  40:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  44:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  48:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  4c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  50:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  54:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  58:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  5c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  60:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  64:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  68:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  6c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  70:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  74:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  78:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  7c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  80:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  84:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  88:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  8c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  90:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  94:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  98:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  9c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  a0:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  a4:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
  a8:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>

000000ac <.dinit>:
  ac:	01 00       	.word	0x0001	; ????
  ae:	01 1e       	adc	r0, r17
  b0:	00 02       	muls	r16, r16
  b2:	62 00       	.word	0x0062	; ????

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	da e0       	ldi	r29, 0x0A	; 10
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	ec ea       	ldi	r30, 0xAC	; 172
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	40 e0       	ldi	r20, 0x00	; 0
  c6:	17 c0       	rjmp	.+46     	; 0xf6 <__do_clear_bss+0x8>
  c8:	b5 91       	lpm	r27, Z+
  ca:	a5 91       	lpm	r26, Z+
  cc:	35 91       	lpm	r19, Z+
  ce:	25 91       	lpm	r18, Z+
  d0:	05 91       	lpm	r16, Z+
  d2:	07 fd       	sbrc	r16, 7
  d4:	0c c0       	rjmp	.+24     	; 0xee <__do_clear_bss>
  d6:	95 91       	lpm	r25, Z+
  d8:	85 91       	lpm	r24, Z+
  da:	ef 01       	movw	r28, r30
  dc:	f9 2f       	mov	r31, r25
  de:	e8 2f       	mov	r30, r24
  e0:	05 90       	lpm	r0, Z+
  e2:	0d 92       	st	X+, r0
  e4:	a2 17       	cp	r26, r18
  e6:	b3 07       	cpc	r27, r19
  e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0x20>
  ea:	fe 01       	movw	r30, r28
  ec:	04 c0       	rjmp	.+8      	; 0xf6 <__do_clear_bss+0x8>

000000ee <__do_clear_bss>:
  ee:	1d 92       	st	X+, r1
  f0:	a2 17       	cp	r26, r18
  f2:	b3 07       	cpc	r27, r19
  f4:	e1 f7       	brne	.-8      	; 0xee <__do_clear_bss>
  f6:	e3 3b       	cpi	r30, 0xB3	; 179
  f8:	f4 07       	cpc	r31, r20
  fa:	31 f7       	brne	.-52     	; 0xc8 <__do_copy_data+0x8>
  fc:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <main>
 100:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>

Disassembly of section .text:

0000025e <__bad_interrupt>:
 25e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.send_pixel:

00000108 <send_pixel>:
}

// send RGB for a single NeoPixel
void send_pixel(unsigned char red, unsigned char green, unsigned char blue)
{
	for(int i = 7; i >= 0; i--) // Loop for each bit in the Green Byte
 108:	27 e0       	ldi	r18, 0x07	; 7
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	1d c0       	rjmp	.+58     	; 0x148 <send_pixel+0x40>
	{
		if(green & (1<<i)) // Send a 1
 10e:	e6 2f       	mov	r30, r22
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	02 2e       	mov	r0, r18
 114:	02 c0       	rjmp	.+4      	; 0x11a <send_pixel+0x12>
 116:	f5 95       	asr	r31
 118:	e7 95       	ror	r30
 11a:	0a 94       	dec	r0
 11c:	e2 f7       	brpl	.-8      	; 0x116 <send_pixel+0xe>
 11e:	e0 ff       	sbrs	r30, 0
 120:	09 c0       	rjmp	.+18     	; 0x134 <send_pixel+0x2c>
		{
			PORTB |= (1<<0); // Set PB0
 122:	95 b1       	in	r25, 0x05	; 5
 124:	91 60       	ori	r25, 0x01	; 1
 126:	95 b9       	out	0x05, r25	; 5
			_NOP();
 128:	00 00       	nop
			_NOP();
 12a:	00 00       	nop
			_NOP();
 12c:	00 00       	nop
			PORTB &= 0; // Clear PB0
 12e:	95 b1       	in	r25, 0x05	; 5
 130:	15 b8       	out	0x05, r1	; 5
 132:	08 c0       	rjmp	.+16     	; 0x144 <send_pixel+0x3c>
		}
		else // Send a 0
		{
			PORTB |= (1<<0); // Set PB0
 134:	95 b1       	in	r25, 0x05	; 5
 136:	91 60       	ori	r25, 0x01	; 1
 138:	95 b9       	out	0x05, r25	; 5
			PORTB &= 0; // Clear PB0
 13a:	95 b1       	in	r25, 0x05	; 5
 13c:	15 b8       	out	0x05, r1	; 5
			_NOP();
 13e:	00 00       	nop
			_NOP();
 140:	00 00       	nop
			_NOP();
 142:	00 00       	nop
}

// send RGB for a single NeoPixel
void send_pixel(unsigned char red, unsigned char green, unsigned char blue)
{
	for(int i = 7; i >= 0; i--) // Loop for each bit in the Green Byte
 144:	21 50       	subi	r18, 0x01	; 1
 146:	31 09       	sbc	r19, r1
 148:	33 23       	and	r19, r19
 14a:	0c f7       	brge	.-62     	; 0x10e <send_pixel+0x6>
 14c:	27 e0       	ldi	r18, 0x07	; 7
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	1d c0       	rjmp	.+58     	; 0x18c <send_pixel+0x84>
		}
	}

	for(int i = 7; i >= 0; i--) // Loop for each bit in the Red Byte
	{
		if(red & (1<<i))// Send a 1
 152:	68 2f       	mov	r22, r24
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	02 2e       	mov	r0, r18
 158:	02 c0       	rjmp	.+4      	; 0x15e <send_pixel+0x56>
 15a:	75 95       	asr	r23
 15c:	67 95       	ror	r22
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <send_pixel+0x52>
 162:	60 ff       	sbrs	r22, 0
 164:	09 c0       	rjmp	.+18     	; 0x178 <send_pixel+0x70>
		{
			PORTB |= (1<<0); // Set PB0
 166:	95 b1       	in	r25, 0x05	; 5
 168:	91 60       	ori	r25, 0x01	; 1
 16a:	95 b9       	out	0x05, r25	; 5
			_NOP();
 16c:	00 00       	nop
			_NOP();
 16e:	00 00       	nop
			_NOP();
 170:	00 00       	nop
			PORTB &= 0; // Clear PB0
 172:	95 b1       	in	r25, 0x05	; 5
 174:	15 b8       	out	0x05, r1	; 5
 176:	08 c0       	rjmp	.+16     	; 0x188 <send_pixel+0x80>
		}
		else // Send a 0
		{
			PORTB |= (1<<0); // Set PB0
 178:	95 b1       	in	r25, 0x05	; 5
 17a:	91 60       	ori	r25, 0x01	; 1
 17c:	95 b9       	out	0x05, r25	; 5
			PORTB &= 0; // Clear PB0
 17e:	95 b1       	in	r25, 0x05	; 5
 180:	15 b8       	out	0x05, r1	; 5
			_NOP();
 182:	00 00       	nop
			_NOP();
 184:	00 00       	nop
			_NOP();
 186:	00 00       	nop
			_NOP();
			_NOP();
		}
	}

	for(int i = 7; i >= 0; i--) // Loop for each bit in the Red Byte
 188:	21 50       	subi	r18, 0x01	; 1
 18a:	31 09       	sbc	r19, r1
 18c:	33 23       	and	r19, r19
 18e:	0c f7       	brge	.-62     	; 0x152 <send_pixel+0x4a>
 190:	87 e0       	ldi	r24, 0x07	; 7
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	1c c0       	rjmp	.+56     	; 0x1ce <send_pixel+0xc6>
		}
	}

	for(int i = 7; i >= 0; i--) // Loop for each bit in the Blue Byte
	{
		if(blue & (1<<i))// Send a 1
 196:	24 2f       	mov	r18, r20
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	08 2e       	mov	r0, r24
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <send_pixel+0x9a>
 19e:	35 95       	asr	r19
 1a0:	27 95       	ror	r18
 1a2:	0a 94       	dec	r0
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <send_pixel+0x96>
 1a6:	20 ff       	sbrs	r18, 0
 1a8:	09 c0       	rjmp	.+18     	; 0x1bc <send_pixel+0xb4>
		{
			PORTB |= (1<<0); // Set PB0
 1aa:	25 b1       	in	r18, 0x05	; 5
 1ac:	21 60       	ori	r18, 0x01	; 1
 1ae:	25 b9       	out	0x05, r18	; 5
			_NOP();
 1b0:	00 00       	nop
			_NOP();
 1b2:	00 00       	nop
			_NOP();
 1b4:	00 00       	nop
			PORTB &= 0; // Clear PB0
 1b6:	25 b1       	in	r18, 0x05	; 5
 1b8:	15 b8       	out	0x05, r1	; 5
 1ba:	08 c0       	rjmp	.+16     	; 0x1cc <send_pixel+0xc4>
		}
		else // Send a 0
		{
			PORTB |= (1<<0); // Set PB0
 1bc:	25 b1       	in	r18, 0x05	; 5
 1be:	21 60       	ori	r18, 0x01	; 1
 1c0:	25 b9       	out	0x05, r18	; 5
			PORTB &= 0; // Clear PB0
 1c2:	25 b1       	in	r18, 0x05	; 5
 1c4:	15 b8       	out	0x05, r1	; 5
			_NOP();
 1c6:	00 00       	nop
			_NOP();
 1c8:	00 00       	nop
			_NOP();
 1ca:	00 00       	nop
			_NOP();
			_NOP();
		}
	}

	for(int i = 7; i >= 0; i--) // Loop for each bit in the Blue Byte
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	99 23       	and	r25, r25
 1d0:	14 f7       	brge	.-60     	; 0x196 <send_pixel+0x8e>
			_NOP();
			_NOP();
		}
	}

}
 1d2:	08 95       	ret

Disassembly of section .text.update_pixels:

0000020c <update_pixels>:
	return;
}

// update all RGB NeoPixel values
void update_pixels()
{
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
	for (int i = 9; i > -1; i--) // Loop through for each NeoPixel
 210:	c9 e0       	ldi	r28, 0x09	; 9
 212:	d0 e0       	ldi	r29, 0x00	; 0
 214:	09 c0       	rjmp	.+18     	; 0x228 <update_pixels+0x1c>
	{
		send_pixel(neo_arr.r[i], neo_arr.g[i], neo_arr.b[i]); // Send a single 24 bit value for RGB
 216:	fe 01       	movw	r30, r28
 218:	e0 50       	subi	r30, 0x00	; 0
 21a:	ff 4f       	sbci	r31, 0xFF	; 255
 21c:	44 89       	ldd	r20, Z+20	; 0x14
 21e:	62 85       	ldd	r22, Z+10	; 0x0a
 220:	80 81       	ld	r24, Z
 222:	0e 94 84 00 	call	0x108	; 0x108 <_etext>
}

// update all RGB NeoPixel values
void update_pixels()
{
	for (int i = 9; i > -1; i--) // Loop through for each NeoPixel
 226:	21 97       	sbiw	r28, 0x01	; 1
 228:	dd 23       	and	r29, r29
 22a:	ac f7       	brge	.-22     	; 0x216 <update_pixels+0xa>
	{
		send_pixel(neo_arr.r[i], neo_arr.g[i], neo_arr.b[i]); // Send a single 24 bit value for RGB
	}

	return;
}
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

Disassembly of section .text.neopixel_init:

0000024e <neopixel_init>:
}

// initialize NeoPixels
void neopixel_init()
{
	DDRB |= 0x01; // Set PB0 to an input
 24e:	84 b1       	in	r24, 0x04	; 4
 250:	81 60       	ori	r24, 0x01	; 1
 252:	84 b9       	out	0x04, r24	; 4
	PORTB &= 0; // Output 0x00 to PORTB
 254:	85 b1       	in	r24, 0x05	; 5
 256:	15 b8       	out	0x05, r1	; 5
	update_pixels(); // Initial NeoPixel Colors
 258:	0e 94 06 01 	call	0x20c	; 0x20c <update_pixels>
 25c:	08 95       	ret

Disassembly of section .text.clear_pixels:

00000232 <clear_pixels>:
}

// clears all NeoPixels
void clear_pixels()
{
	for(int i = 0; i < 10; i++) // Loop to clear each NeoPixel
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	07 c0       	rjmp	.+14     	; 0x246 <clear_pixels+0x14>
	{
		neo_arr.r[i] = 0x00;
 238:	fc 01       	movw	r30, r24
 23a:	e0 50       	subi	r30, 0x00	; 0
 23c:	ff 4f       	sbci	r31, 0xFF	; 255
 23e:	10 82       	st	Z, r1
		neo_arr.g[i] = 0x00;
 240:	12 86       	std	Z+10, r1	; 0x0a
		neo_arr.b[i] = 0x00;
 242:	14 8a       	std	Z+20, r1	; 0x14
}

// clears all NeoPixels
void clear_pixels()
{
	for(int i = 0; i < 10; i++) // Loop to clear each NeoPixel
 244:	01 96       	adiw	r24, 0x01	; 1
 246:	8a 30       	cpi	r24, 0x0A	; 10
 248:	91 05       	cpc	r25, r1
 24a:	b4 f3       	brlt	.-20     	; 0x238 <clear_pixels+0x6>
		neo_arr.g[i] = 0x00;
		neo_arr.b[i] = 0x00;
	}

	return;
 24c:	08 95       	ret

Disassembly of section .text.main:

000001d4 <main>:
	{0x00, 0x00, 0x00, 0x00, 0x10, 0x20, 0x30, 0x30, 0x20, 0x10}
};

int main(void)
{
	neopixel_init();
 1d4:	0e 94 27 01 	call	0x24e	; 0x24e <neopixel_init>
	int light_level = 0;
	int temp = 70;

	while(1)
	{
		clear_pixels();
 1d8:	0e 94 19 01 	call	0x232	; 0x232 <clear_pixels>
		// reset to debug values
		light_level &= 0x3F; // Limit to 0-63
		int to_loop = (((float)light_level/64))*10;
		to_loop = 5;
		for (int i = 0; i < to_loop; i++) // Set brightness for first 9 neopixels based on light_lvl
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	08 c0       	rjmp	.+16     	; 0x1f2 <main+0x1e>
		{
			neo_arr.r[i] = 0x00;
 1e2:	fc 01       	movw	r30, r24
 1e4:	e0 50       	subi	r30, 0x00	; 0
 1e6:	ff 4f       	sbci	r31, 0xFF	; 255
 1e8:	10 82       	st	Z, r1
			neo_arr.g[i] = 0x20;
 1ea:	20 e2       	ldi	r18, 0x20	; 32
 1ec:	22 87       	std	Z+10, r18	; 0x0a
			neo_arr.b[i] = 0x00;
 1ee:	14 8a       	std	Z+20, r1	; 0x14
		clear_pixels();
		// reset to debug values
		light_level &= 0x3F; // Limit to 0-63
		int to_loop = (((float)light_level/64))*10;
		to_loop = 5;
		for (int i = 0; i < to_loop; i++) // Set brightness for first 9 neopixels based on light_lvl
 1f0:	01 96       	adiw	r24, 0x01	; 1
 1f2:	85 30       	cpi	r24, 0x05	; 5
 1f4:	91 05       	cpc	r25, r1
 1f6:	ac f3       	brlt	.-22     	; 0x1e2 <main+0xe>
		} else if (temp < 64) {  // LT_64   (32-63)
			neo_arr.r[9] = 0;
			neo_arr.g[9] = (temp-32)*2;
			neo_arr.b[9] = (-temp+64)*2;
		} else { // GT_64 (64-96)
			neo_arr.r[9] = (temp-64)*2;
 1f8:	e0 e0       	ldi	r30, 0x00	; 0
 1fa:	f1 e0       	ldi	r31, 0x01	; 1
 1fc:	8c e0       	ldi	r24, 0x0C	; 12
 1fe:	81 87       	std	Z+9, r24	; 0x09
			neo_arr.g[9] = (-temp+96)*2; 
 200:	84 e3       	ldi	r24, 0x34	; 52
 202:	83 8b       	std	Z+19, r24	; 0x13
			neo_arr.b[9] = 0;
 204:	15 8e       	std	Z+29, r1	; 0x1d
		}
		update_pixels();
 206:	0e 94 06 01 	call	0x20c	; 0x20c <update_pixels>
	}
 20a:	e6 cf       	rjmp	.-52     	; 0x1d8 <main+0x4>
