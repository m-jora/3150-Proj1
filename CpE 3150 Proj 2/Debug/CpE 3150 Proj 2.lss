
CpE 3150 Proj 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000376  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003c  00800100  00800100  000003ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000041c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e04  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b1f  00000000  00000000  000012a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005c9  00000000  00000000  00001dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00002390  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000563  00000000  00000000  00002404  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000118  00000000  00000000  00002967  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002a7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	ac 33       	cpi	r26, 0x3C	; 60
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 46 01 	call	0x28c	; 0x28c <main>
  cc:	0c 94 b9 01 	jmp	0x372	; 0x372 <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <freq_delay>:
    TIFR0 = 1<<TOV0;
}


void freq_delay(){
	TCNT4 = 0x23;
  d4:	83 e2       	ldi	r24, 0x23	; 35
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	90 93 bf 00 	sts	0x00BF, r25	; 0x8000bf <__TEXT_REGION_LENGTH__+0x7f80bf>
  dc:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <__TEXT_REGION_LENGTH__+0x7f80be>
	TC4H = -0x00;
  e0:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <__TEXT_REGION_LENGTH__+0x7f80bf>
	TCCR4B = 0b00000011;
  e4:	83 e0       	ldi	r24, 0x03	; 3
  e6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	while(!(TIFR4 & (1<<TOV4)));
  ea:	ca 9b       	sbis	0x19, 2	; 25
  ec:	fe cf       	rjmp	.-4      	; 0xea <freq_delay+0x16>
	TIFR4 = 1<<TOV4;
  ee:	84 e0       	ldi	r24, 0x04	; 4
  f0:	89 bb       	out	0x19, r24	; 25
  f2:	08 95       	ret

000000f4 <beep>:
    }
}


void beep() {
    DDRC |= 0b01000000;
  f4:	87 b1       	in	r24, 0x07	; 7
  f6:	80 64       	ori	r24, 0x40	; 64
  f8:	87 b9       	out	0x07, r24	; 7
    TCNT0 = -0xFF;
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	86 bd       	out	0x26, r24	; 38
    TCCR0B = 0b00000101;
  fe:	85 e0       	ldi	r24, 0x05	; 5
 100:	85 bd       	out	0x25, r24	; 37
    
    while(!(TIFR0 & (1<<TOV0))){
 102:	06 c0       	rjmp	.+12     	; 0x110 <beep+0x1c>
		freq_delay();
 104:	0e 94 6a 00 	call	0xd4	; 0xd4 <freq_delay>
		PORTC ^= 0b01000000;    
 108:	98 b1       	in	r25, 0x08	; 8
 10a:	80 e4       	ldi	r24, 0x40	; 64
 10c:	89 27       	eor	r24, r25
 10e:	88 b9       	out	0x08, r24	; 8
void beep() {
    DDRC |= 0b01000000;
    TCNT0 = -0xFF;
    TCCR0B = 0b00000101;
    
    while(!(TIFR0 & (1<<TOV0))){
 110:	a8 9b       	sbis	0x15, 0	; 21
 112:	f8 cf       	rjmp	.-16     	; 0x104 <beep+0x10>
		freq_delay();
		PORTC ^= 0b01000000;    
    }
    TCCR0B = 0x00;
 114:	15 bc       	out	0x25, r1	; 37
    TIFR0 = 1<<TOV0;
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	85 bb       	out	0x15, r24	; 21
 11a:	08 95       	ret

0000011c <set_all_pixels>:
}


void set_all_pixels(unsigned red, unsigned green, unsigned blue) // pixel setter
{
	for (int i = 0; i < 10; i++)
 11c:	20 e0       	ldi	r18, 0x00	; 0
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	11 c0       	rjmp	.+34     	; 0x144 <set_all_pixels+0x28>
	{
		neopixel_arr[i].red = red;
 122:	f9 01       	movw	r30, r18
 124:	ee 0f       	add	r30, r30
 126:	ff 1f       	adc	r31, r31
 128:	e2 0f       	add	r30, r18
 12a:	f3 1f       	adc	r31, r19
 12c:	ee 0f       	add	r30, r30
 12e:	ff 1f       	adc	r31, r31
 130:	e0 50       	subi	r30, 0x00	; 0
 132:	ff 4f       	sbci	r31, 0xFF	; 255
 134:	91 83       	std	Z+1, r25	; 0x01
 136:	80 83       	st	Z, r24
		neopixel_arr[i].green = green;
 138:	73 83       	std	Z+3, r23	; 0x03
 13a:	62 83       	std	Z+2, r22	; 0x02
		neopixel_arr[i].blue = blue;
 13c:	55 83       	std	Z+5, r21	; 0x05
 13e:	44 83       	std	Z+4, r20	; 0x04
}


void set_all_pixels(unsigned red, unsigned green, unsigned blue) // pixel setter
{
	for (int i = 0; i < 10; i++)
 140:	2f 5f       	subi	r18, 0xFF	; 255
 142:	3f 4f       	sbci	r19, 0xFF	; 255
 144:	2a 30       	cpi	r18, 0x0A	; 10
 146:	31 05       	cpc	r19, r1
 148:	64 f3       	brlt	.-40     	; 0x122 <set_all_pixels+0x6>
		neopixel_arr[i].red = red;
		neopixel_arr[i].green = green;
		neopixel_arr[i].blue = blue;
	}
	return;
}
 14a:	08 95       	ret

0000014c <enable_pixels>:

void enable_pixels() // sends bit values to the NeoPixels
{
	for (int i = 0; i < 10; i++)
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	88 c0       	rjmp	.+272    	; 0x262 <enable_pixels+0x116>
	{
		for (int b = 7; b >= 0; b--)
		{
			send_bit(neopixel_arr[i].green >> b);
 152:	fc 01       	movw	r30, r24
 154:	ee 0f       	add	r30, r30
 156:	ff 1f       	adc	r31, r31
 158:	e8 0f       	add	r30, r24
 15a:	f9 1f       	adc	r31, r25
 15c:	ee 0f       	add	r30, r30
 15e:	ff 1f       	adc	r31, r31
 160:	e0 50       	subi	r30, 0x00	; 0
 162:	ff 4f       	sbci	r31, 0xFF	; 255
 164:	42 81       	ldd	r20, Z+2	; 0x02
 166:	53 81       	ldd	r21, Z+3	; 0x03
 168:	02 2e       	mov	r0, r18
 16a:	02 c0       	rjmp	.+4      	; 0x170 <enable_pixels+0x24>
 16c:	56 95       	lsr	r21
 16e:	47 95       	ror	r20
 170:	0a 94       	dec	r0
 172:	e2 f7       	brpl	.-8      	; 0x16c <enable_pixels+0x20>

// neopixel garbage
static inline void send_bit(unsigned bit) // function that handles bit sending
{
	int is_on = bit & 1;
	if (is_on)
 174:	40 ff       	sbrs	r20, 0
 176:	0a c0       	rjmp	.+20     	; 0x18c <enable_pixels+0x40>
	{
		PORTB |= 0b00000001;
 178:	45 b1       	in	r20, 0x05	; 5
 17a:	41 60       	ori	r20, 0x01	; 1
 17c:	45 b9       	out	0x05, r20	; 5
		_NOP();
 17e:	00 00       	nop
		_NOP();
 180:	00 00       	nop
		_NOP();
 182:	00 00       	nop
		PORTB &= 0b11111110;
 184:	45 b1       	in	r20, 0x05	; 5
 186:	4e 7f       	andi	r20, 0xFE	; 254
 188:	45 b9       	out	0x05, r20	; 5
 18a:	09 c0       	rjmp	.+18     	; 0x19e <enable_pixels+0x52>
	}
	else
	{
		PORTB |= 0b00000001;
 18c:	45 b1       	in	r20, 0x05	; 5
 18e:	41 60       	ori	r20, 0x01	; 1
 190:	45 b9       	out	0x05, r20	; 5
		PORTB &= 0b11111110;
 192:	45 b1       	in	r20, 0x05	; 5
 194:	4e 7f       	andi	r20, 0xFE	; 254
 196:	45 b9       	out	0x05, r20	; 5
		_NOP();
 198:	00 00       	nop
		_NOP();
 19a:	00 00       	nop
		_NOP();
 19c:	00 00       	nop

void enable_pixels() // sends bit values to the NeoPixels
{
	for (int i = 0; i < 10; i++)
	{
		for (int b = 7; b >= 0; b--)
 19e:	21 50       	subi	r18, 0x01	; 1
 1a0:	31 09       	sbc	r19, r1
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <enable_pixels+0x5c>
 1a4:	27 e0       	ldi	r18, 0x07	; 7
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	33 23       	and	r19, r19
 1aa:	9c f6       	brge	.-90     	; 0x152 <enable_pixels+0x6>
 1ac:	27 e0       	ldi	r18, 0x07	; 7
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	28 c0       	rjmp	.+80     	; 0x202 <enable_pixels+0xb6>
		{
			send_bit(neopixel_arr[i].green >> b);
		}
		for (int b = 7; b >= 0; b--)
		{
			send_bit(neopixel_arr[i].red >> b);
 1b2:	fc 01       	movw	r30, r24
 1b4:	ee 0f       	add	r30, r30
 1b6:	ff 1f       	adc	r31, r31
 1b8:	e8 0f       	add	r30, r24
 1ba:	f9 1f       	adc	r31, r25
 1bc:	ee 0f       	add	r30, r30
 1be:	ff 1f       	adc	r31, r31
 1c0:	e0 50       	subi	r30, 0x00	; 0
 1c2:	ff 4f       	sbci	r31, 0xFF	; 255
 1c4:	40 81       	ld	r20, Z
 1c6:	51 81       	ldd	r21, Z+1	; 0x01
 1c8:	02 2e       	mov	r0, r18
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <enable_pixels+0x84>
 1cc:	56 95       	lsr	r21
 1ce:	47 95       	ror	r20
 1d0:	0a 94       	dec	r0
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <enable_pixels+0x80>

// neopixel garbage
static inline void send_bit(unsigned bit) // function that handles bit sending
{
	int is_on = bit & 1;
	if (is_on)
 1d4:	40 ff       	sbrs	r20, 0
 1d6:	0a c0       	rjmp	.+20     	; 0x1ec <enable_pixels+0xa0>
	{
		PORTB |= 0b00000001;
 1d8:	45 b1       	in	r20, 0x05	; 5
 1da:	41 60       	ori	r20, 0x01	; 1
 1dc:	45 b9       	out	0x05, r20	; 5
		_NOP();
 1de:	00 00       	nop
		_NOP();
 1e0:	00 00       	nop
		_NOP();
 1e2:	00 00       	nop
		PORTB &= 0b11111110;
 1e4:	45 b1       	in	r20, 0x05	; 5
 1e6:	4e 7f       	andi	r20, 0xFE	; 254
 1e8:	45 b9       	out	0x05, r20	; 5
 1ea:	09 c0       	rjmp	.+18     	; 0x1fe <enable_pixels+0xb2>
	}
	else
	{
		PORTB |= 0b00000001;
 1ec:	45 b1       	in	r20, 0x05	; 5
 1ee:	41 60       	ori	r20, 0x01	; 1
 1f0:	45 b9       	out	0x05, r20	; 5
		PORTB &= 0b11111110;
 1f2:	45 b1       	in	r20, 0x05	; 5
 1f4:	4e 7f       	andi	r20, 0xFE	; 254
 1f6:	45 b9       	out	0x05, r20	; 5
		_NOP();
 1f8:	00 00       	nop
		_NOP();
 1fa:	00 00       	nop
		_NOP();
 1fc:	00 00       	nop
	{
		for (int b = 7; b >= 0; b--)
		{
			send_bit(neopixel_arr[i].green >> b);
		}
		for (int b = 7; b >= 0; b--)
 1fe:	21 50       	subi	r18, 0x01	; 1
 200:	31 09       	sbc	r19, r1
 202:	33 23       	and	r19, r19
 204:	b4 f6       	brge	.-84     	; 0x1b2 <enable_pixels+0x66>
 206:	27 e0       	ldi	r18, 0x07	; 7
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	28 c0       	rjmp	.+80     	; 0x25c <enable_pixels+0x110>
		{
			send_bit(neopixel_arr[i].red >> b);
		}
		for (int b = 7; b >= 0; b--)
		{
			send_bit(neopixel_arr[i].blue >> b);
 20c:	fc 01       	movw	r30, r24
 20e:	ee 0f       	add	r30, r30
 210:	ff 1f       	adc	r31, r31
 212:	e8 0f       	add	r30, r24
 214:	f9 1f       	adc	r31, r25
 216:	ee 0f       	add	r30, r30
 218:	ff 1f       	adc	r31, r31
 21a:	e0 50       	subi	r30, 0x00	; 0
 21c:	ff 4f       	sbci	r31, 0xFF	; 255
 21e:	44 81       	ldd	r20, Z+4	; 0x04
 220:	55 81       	ldd	r21, Z+5	; 0x05
 222:	02 2e       	mov	r0, r18
 224:	02 c0       	rjmp	.+4      	; 0x22a <enable_pixels+0xde>
 226:	56 95       	lsr	r21
 228:	47 95       	ror	r20
 22a:	0a 94       	dec	r0
 22c:	e2 f7       	brpl	.-8      	; 0x226 <enable_pixels+0xda>

// neopixel garbage
static inline void send_bit(unsigned bit) // function that handles bit sending
{
	int is_on = bit & 1;
	if (is_on)
 22e:	40 ff       	sbrs	r20, 0
 230:	0a c0       	rjmp	.+20     	; 0x246 <enable_pixels+0xfa>
	{
		PORTB |= 0b00000001;
 232:	45 b1       	in	r20, 0x05	; 5
 234:	41 60       	ori	r20, 0x01	; 1
 236:	45 b9       	out	0x05, r20	; 5
		_NOP();
 238:	00 00       	nop
		_NOP();
 23a:	00 00       	nop
		_NOP();
 23c:	00 00       	nop
		PORTB &= 0b11111110;
 23e:	45 b1       	in	r20, 0x05	; 5
 240:	4e 7f       	andi	r20, 0xFE	; 254
 242:	45 b9       	out	0x05, r20	; 5
 244:	09 c0       	rjmp	.+18     	; 0x258 <enable_pixels+0x10c>
	}
	else
	{
		PORTB |= 0b00000001;
 246:	45 b1       	in	r20, 0x05	; 5
 248:	41 60       	ori	r20, 0x01	; 1
 24a:	45 b9       	out	0x05, r20	; 5
		PORTB &= 0b11111110;
 24c:	45 b1       	in	r20, 0x05	; 5
 24e:	4e 7f       	andi	r20, 0xFE	; 254
 250:	45 b9       	out	0x05, r20	; 5
		_NOP();
 252:	00 00       	nop
		_NOP();
 254:	00 00       	nop
		_NOP();
 256:	00 00       	nop
		}
		for (int b = 7; b >= 0; b--)
		{
			send_bit(neopixel_arr[i].red >> b);
		}
		for (int b = 7; b >= 0; b--)
 258:	21 50       	subi	r18, 0x01	; 1
 25a:	31 09       	sbc	r19, r1
 25c:	33 23       	and	r19, r19
 25e:	b4 f6       	brge	.-84     	; 0x20c <enable_pixels+0xc0>
	return;
}

void enable_pixels() // sends bit values to the NeoPixels
{
	for (int i = 0; i < 10; i++)
 260:	01 96       	adiw	r24, 0x01	; 1
 262:	8a 30       	cpi	r24, 0x0A	; 10
 264:	91 05       	cpc	r25, r1
 266:	0c f4       	brge	.+2      	; 0x26a <enable_pixels+0x11e>
 268:	9d cf       	rjmp	.-198    	; 0x1a4 <enable_pixels+0x58>
		{
			send_bit(neopixel_arr[i].blue >> b);
		}
	}
	return;
}
 26a:	08 95       	ret

0000026c <delay_15ms_ctc>:


void delay_15ms_ctc()
{
	OCR0B = 0x75;
 26c:	85 e7       	ldi	r24, 0x75	; 117
 26e:	88 bd       	out	0x28, r24	; 40
	TCNT0 = 0x00;
 270:	16 bc       	out	0x26, r1	; 38
	TCCR0B = (TCCR0B & 0x00) | (1<<CS02) | (1<<CS00);
 272:	85 b5       	in	r24, 0x25	; 37
 274:	85 e0       	ldi	r24, 0x05	; 5
 276:	85 bd       	out	0x25, r24	; 37
	while((TIFR0 & (1<<OCF0B)) == 0);
 278:	aa 9b       	sbis	0x15, 2	; 21
 27a:	fe cf       	rjmp	.-4      	; 0x278 <delay_15ms_ctc+0xc>
	TCCR0B &= ~((1<<CS02)|(1<<CS01)|(1<<CS00));
 27c:	85 b5       	in	r24, 0x25	; 37
 27e:	88 7f       	andi	r24, 0xF8	; 248
 280:	85 bd       	out	0x25, r24	; 37
	TIFR0 |= 1<<OCF1A;
 282:	85 b3       	in	r24, 0x15	; 21
 284:	82 60       	ori	r24, 0x02	; 2
 286:	85 bb       	out	0x15, r24	; 21
	TCNT0 = 0;
 288:	16 bc       	out	0x26, r1	; 38
 28a:	08 95       	ret

0000028c <main>:
struct rgb neopixel_arr[10];
//void setpixcolor(int n, int r, int g, int b);

int main(void)
{
	DDRB |= (1 << 0); // sets portB.0 to output
 28c:	84 b1       	in	r24, 0x04	; 4
 28e:	81 60       	ori	r24, 0x01	; 1
 290:	84 b9       	out	0x04, r24	; 4
	set_all_pixels(0,0,0); // pixels set to 0 (off)
 292:	40 e0       	ldi	r20, 0x00	; 0
 294:	50 e0       	ldi	r21, 0x00	; 0
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	70 e0       	ldi	r23, 0x00	; 0
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 8e 00 	call	0x11c	; 0x11c <set_all_pixels>
	enable_pixels();	// zero value output
 2a2:	0e 94 a6 00 	call	0x14c	; 0x14c <enable_pixels>
	int brightness = 0;
	while(1)
    {
        TCNT1H = -0xF4; // sets up 2 second timer with a 1024
 2a6:	8c e0       	ldi	r24, 0x0C	; 12
 2a8:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
        TCNT1L = 0x24;
 2ac:	84 e2       	ldi	r24, 0x24	; 36
 2ae:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
        TCCR1B = 0b00000100;
 2b2:	84 e0       	ldi	r24, 0x04	; 4
 2b4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		brightness = 0;
 2b8:	00 e0       	ldi	r16, 0x00	; 0
 2ba:	10 e0       	ldi	r17, 0x00	; 0
        while(!(TIFR1 & (1<<TOV1))) //2 second timer
 2bc:	32 c0       	rjmp	.+100    	; 0x322 <main+0x96>
        {
			//if(brightness >255)
				//brightness = 0;
            TCNT3H = -0x30;
 2be:	80 ed       	ldi	r24, 0xD0	; 208
 2c0:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7f8095>
            TCNT3L = 0xD4;
 2c4:	84 ed       	ldi	r24, 0xD4	; 212
 2c6:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__TEXT_REGION_LENGTH__+0x7f8094>
            TCCR3B = 0b00000011;
 2ca:	83 e0       	ldi	r24, 0x03	; 3
 2cc:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f8091>
            while (!(TIFR3 & (1<<TOV3))) //.1 second timer
 2d0:	17 c0       	rjmp	.+46     	; 0x300 <main+0x74>
            {
                if(PIND & (1<<4)) // button get pressed
 2d2:	4c 9b       	sbis	0x09, 4	; 9
 2d4:	15 c0       	rjmp	.+42     	; 0x300 <main+0x74>
                {
                    int hold_low = TCNT1L;
 2d6:	c0 91 84 00 	lds	r28, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                    int hold_high = TCNT1H;
 2da:	d0 91 85 00 	lds	r29, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
                    beep(); // beep time
 2de:	0e 94 7a 00 	call	0xf4	; 0xf4 <beep>
                    while(PIND & (1<<4)); // waiting for button depress
 2e2:	4c 99       	sbic	0x09, 4	; 9
 2e4:	fe cf       	rjmp	.-4      	; 0x2e2 <main+0x56>
 2e6:	06 c0       	rjmp	.+12     	; 0x2f4 <main+0x68>
                    
                    while (!(PIND & (1<<4)))
                    {
						TCNT1H = hold_high;
 2e8:	d0 93 85 00 	sts	0x0085, r29	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
						TCNT1L = hold_low;
 2ec:	c0 93 84 00 	sts	0x0084, r28	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
						TIFR1 = 1<<TOV1;
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	86 bb       	out	0x16, r24	; 22
                    int hold_low = TCNT1L;
                    int hold_high = TCNT1H;
                    beep(); // beep time
                    while(PIND & (1<<4)); // waiting for button depress
                    
                    while (!(PIND & (1<<4)))
 2f4:	4c 9b       	sbis	0x09, 4	; 9
 2f6:	f8 cf       	rjmp	.-16     	; 0x2e8 <main+0x5c>
                    {
						TCNT1H = hold_high;
						TCNT1L = hold_low;
						TIFR1 = 1<<TOV1;
                    }
					beep();
 2f8:	0e 94 7a 00 	call	0xf4	; 0xf4 <beep>
					while(PIND & (1<<4));
 2fc:	4c 99       	sbic	0x09, 4	; 9
 2fe:	fe cf       	rjmp	.-4      	; 0x2fc <main+0x70>
			//if(brightness >255)
				//brightness = 0;
            TCNT3H = -0x30;
            TCNT3L = 0xD4;
            TCCR3B = 0b00000011;
            while (!(TIFR3 & (1<<TOV3))) //.1 second timer
 300:	c0 9b       	sbis	0x18, 0	; 24
 302:	e7 cf       	rjmp	.-50     	; 0x2d2 <main+0x46>
                    }
					beep();
					while(PIND & (1<<4));
                }
            }
			set_all_pixels(brightness,0,0);
 304:	40 e0       	ldi	r20, 0x00	; 0
 306:	50 e0       	ldi	r21, 0x00	; 0
 308:	60 e0       	ldi	r22, 0x00	; 0
 30a:	70 e0       	ldi	r23, 0x00	; 0
 30c:	c8 01       	movw	r24, r16
 30e:	0e 94 8e 00 	call	0x11c	; 0x11c <set_all_pixels>
			enable_pixels();
 312:	0e 94 a6 00 	call	0x14c	; 0x14c <enable_pixels>
			brightness += 13;
 316:	03 5f       	subi	r16, 0xF3	; 243
 318:	1f 4f       	sbci	r17, 0xFF	; 255
            TCCR3B = 0x00;
 31a:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f8091>
            TIFR3 = 1<<TOV3;
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	88 bb       	out	0x18, r24	; 24
    {
        TCNT1H = -0xF4; // sets up 2 second timer with a 1024
        TCNT1L = 0x24;
        TCCR1B = 0b00000100;
		brightness = 0;
        while(!(TIFR1 & (1<<TOV1))) //2 second timer
 322:	b0 9b       	sbis	0x16, 0	; 22
 324:	cc cf       	rjmp	.-104    	; 0x2be <main+0x32>
			enable_pixels();
			brightness += 13;
            TCCR3B = 0x00;
            TIFR3 = 1<<TOV3;
        }
        TCCR1B = 0x00;
 326:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
        TIFR1 = 1<<TOV1;
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	86 bb       	out	0x16, r24	; 22

        beep(); // makes speaker go brrrrrrrrr
 32e:	0e 94 7a 00 	call	0xf4	; 0xf4 <beep>
		for(int i = 0; i<10; i ++) // strobe
 332:	c0 e0       	ldi	r28, 0x00	; 0
 334:	d0 e0       	ldi	r29, 0x00	; 0
 336:	19 c0       	rjmp	.+50     	; 0x36a <main+0xde>
		{
			set_all_pixels(0,0,0);
 338:	40 e0       	ldi	r20, 0x00	; 0
 33a:	50 e0       	ldi	r21, 0x00	; 0
 33c:	60 e0       	ldi	r22, 0x00	; 0
 33e:	70 e0       	ldi	r23, 0x00	; 0
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 8e 00 	call	0x11c	; 0x11c <set_all_pixels>
			enable_pixels();
 348:	0e 94 a6 00 	call	0x14c	; 0x14c <enable_pixels>
			delay_15ms_ctc();
 34c:	0e 94 36 01 	call	0x26c	; 0x26c <delay_15ms_ctc>
			set_all_pixels(255,0,0);
 350:	40 e0       	ldi	r20, 0x00	; 0
 352:	50 e0       	ldi	r21, 0x00	; 0
 354:	60 e0       	ldi	r22, 0x00	; 0
 356:	70 e0       	ldi	r23, 0x00	; 0
 358:	8f ef       	ldi	r24, 0xFF	; 255
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 8e 00 	call	0x11c	; 0x11c <set_all_pixels>
			enable_pixels();	
 360:	0e 94 a6 00 	call	0x14c	; 0x14c <enable_pixels>
			delay_15ms_ctc();
 364:	0e 94 36 01 	call	0x26c	; 0x26c <delay_15ms_ctc>
        }
        TCCR1B = 0x00;
        TIFR1 = 1<<TOV1;

        beep(); // makes speaker go brrrrrrrrr
		for(int i = 0; i<10; i ++) // strobe
 368:	21 96       	adiw	r28, 0x01	; 1
 36a:	ca 30       	cpi	r28, 0x0A	; 10
 36c:	d1 05       	cpc	r29, r1
 36e:	24 f3       	brlt	.-56     	; 0x338 <main+0xac>
 370:	9a cf       	rjmp	.-204    	; 0x2a6 <main+0x1a>

00000372 <_exit>:
 372:	f8 94       	cli

00000374 <__stop_program>:
 374:	ff cf       	rjmp	.-2      	; 0x374 <__stop_program>
