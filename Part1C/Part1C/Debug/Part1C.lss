
Part1C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000340  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000106  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800100  00800100  00000340  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000036f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001000  00000000  00000000  000003b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ad7  00000000  00000000  000013b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004c2  00000000  00000000  00001e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  00002350  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000388  00000000  00000000  000023ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000216  00000000  00000000  00002774  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000298a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000002c8  000002c8  0000033c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000029c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.clear_pixels 0000001c  00000298  00000298  0000030c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.short_delay 00000014  000002b4  000002b4  00000328  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.send_pixel 000000ee  00000106  00000106  0000017a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.update_pixels 0000002c  0000024a  0000024a  000002be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.neopixel_init 00000056  000001f4  000001f4  00000268  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.main    00000022  00000276  00000276  000002ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__ctors_end>
   4:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
   8:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
   c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  10:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  14:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  18:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  1c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  20:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  24:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  28:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  2c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  30:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  34:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  38:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  3c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  40:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  44:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  48:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  4c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  50:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  54:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  58:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  5c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  60:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  64:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  68:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  6c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  70:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  74:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  78:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  7c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  80:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  84:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  88:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  8c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  90:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  94:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  98:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  9c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  a0:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  a4:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  a8:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>

000000ac <.dinit>:
  ac:	01 00       	.word	0x0001	; ????
  ae:	01 1e       	adc	r0, r17
  b0:	80 00       	.word	0x0080	; ????

000000b2 <__ctors_end>:
  b2:	11 24       	eor	r1, r1
  b4:	1f be       	out	0x3f, r1	; 63
  b6:	cf ef       	ldi	r28, 0xFF	; 255
  b8:	da e0       	ldi	r29, 0x0A	; 10
  ba:	de bf       	out	0x3e, r29	; 62
  bc:	cd bf       	out	0x3d, r28	; 61

000000be <__do_copy_data>:
  be:	ec ea       	ldi	r30, 0xAC	; 172
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	17 c0       	rjmp	.+46     	; 0xf4 <__do_clear_bss+0x8>
  c6:	b5 91       	lpm	r27, Z+
  c8:	a5 91       	lpm	r26, Z+
  ca:	35 91       	lpm	r19, Z+
  cc:	25 91       	lpm	r18, Z+
  ce:	05 91       	lpm	r16, Z+
  d0:	07 fd       	sbrc	r16, 7
  d2:	0c c0       	rjmp	.+24     	; 0xec <__do_clear_bss>
  d4:	95 91       	lpm	r25, Z+
  d6:	85 91       	lpm	r24, Z+
  d8:	ef 01       	movw	r28, r30
  da:	f9 2f       	mov	r31, r25
  dc:	e8 2f       	mov	r30, r24
  de:	05 90       	lpm	r0, Z+
  e0:	0d 92       	st	X+, r0
  e2:	a2 17       	cp	r26, r18
  e4:	b3 07       	cpc	r27, r19
  e6:	d9 f7       	brne	.-10     	; 0xde <__do_copy_data+0x20>
  e8:	fe 01       	movw	r30, r28
  ea:	04 c0       	rjmp	.+8      	; 0xf4 <__do_clear_bss+0x8>

000000ec <__do_clear_bss>:
  ec:	1d 92       	st	X+, r1
  ee:	a2 17       	cp	r26, r18
  f0:	b3 07       	cpc	r27, r19
  f2:	e1 f7       	brne	.-8      	; 0xec <__do_clear_bss>
  f4:	e1 3b       	cpi	r30, 0xB1	; 177
  f6:	f4 07       	cpc	r31, r20
  f8:	31 f7       	brne	.-52     	; 0xc6 <__do_copy_data+0x8>
  fa:	0e 94 3b 01 	call	0x276	; 0x276 <main>
  fe:	0c 94 81 00 	jmp	0x102	; 0x102 <_exit>

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>

Disassembly of section .text:

000002c8 <__bad_interrupt>:
 2c8:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.clear_pixels:

00000298 <clear_pixels>:
}

// clears all NeoPixels
void clear_pixels()
{
	for(int i = 0; i < 10; i++) // Loop to clear each NeoPixel
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	07 c0       	rjmp	.+14     	; 0x2ac <clear_pixels+0x14>
	{
		neo_arr.r[i] = 0x00;
 29e:	fc 01       	movw	r30, r24
 2a0:	e0 50       	subi	r30, 0x00	; 0
 2a2:	ff 4f       	sbci	r31, 0xFF	; 255
 2a4:	10 82       	st	Z, r1
		neo_arr.g[i] = 0x00;
 2a6:	12 86       	std	Z+10, r1	; 0x0a
		neo_arr.b[i] = 0x00;
 2a8:	14 8a       	std	Z+20, r1	; 0x14
}

// clears all NeoPixels
void clear_pixels()
{
	for(int i = 0; i < 10; i++) // Loop to clear each NeoPixel
 2aa:	01 96       	adiw	r24, 0x01	; 1
 2ac:	8a 30       	cpi	r24, 0x0A	; 10
 2ae:	91 05       	cpc	r25, r1
 2b0:	b4 f3       	brlt	.-20     	; 0x29e <clear_pixels+0x6>
		neo_arr.g[i] = 0x00;
		neo_arr.b[i] = 0x00;
	}

	return;
}
 2b2:	08 95       	ret

Disassembly of section .text.short_delay:

000002b4 <short_delay>:
// Delays for clkCycles
void short_delay(unsigned char clkCycles)
{
	// 2's Complement
	clkCycles ^= 0xFF;
	clkCycles += 0x01;
 2b4:	81 95       	neg	r24

	TCNT0 = clkCycles; // Set Timer value to the desired clock cycles
 2b6:	86 bd       	out	0x26, r24	; 38
	TCCR0B = 0x01; // Normal Mode, No Prescaling
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	85 bd       	out	0x25, r24	; 37

	while(!(TIFR0 & (1<<TOV0)));
 2bc:	a8 9b       	sbis	0x15, 0	; 21
 2be:	fe cf       	rjmp	.-4      	; 0x2bc <short_delay+0x8>

	TCCR0B = 0; // Stop the timer
 2c0:	15 bc       	out	0x25, r1	; 37
	TIFR0 = (1<<TOV0); // Reset overflow flag
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	85 bb       	out	0x15, r24	; 21
 2c6:	08 95       	ret

Disassembly of section .text.send_pixel:

00000106 <send_pixel>:
	return;
}

// send RGB for a single NeoPixel
void send_pixel(unsigned char red, unsigned char green, unsigned char blue)
{
 106:	ff 92       	push	r15
 108:	0f 93       	push	r16
 10a:	1f 93       	push	r17
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	08 2f       	mov	r16, r24
 112:	f6 2e       	mov	r15, r22
 114:	14 2f       	mov	r17, r20
	for(int i = 7; i >= 0; i--) // Loop for each bit in the Green Byte
 116:	c7 e0       	ldi	r28, 0x07	; 7
 118:	d0 e0       	ldi	r29, 0x00	; 0
 11a:	1e c0       	rjmp	.+60     	; 0x158 <send_pixel+0x52>
	{
		if(green & (1<<i)) // Send a 1
 11c:	8f 2d       	mov	r24, r15
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0c 2e       	mov	r0, r28
 122:	02 c0       	rjmp	.+4      	; 0x128 <send_pixel+0x22>
 124:	95 95       	asr	r25
 126:	87 95       	ror	r24
 128:	0a 94       	dec	r0
 12a:	e2 f7       	brpl	.-8      	; 0x124 <send_pixel+0x1e>
 12c:	80 ff       	sbrs	r24, 0
 12e:	0a c0       	rjmp	.+20     	; 0x144 <send_pixel+0x3e>
		{
			PORTB |= (1<<0); // Set PB0
 130:	85 b1       	in	r24, 0x05	; 5
 132:	81 60       	ori	r24, 0x01	; 1
 134:	85 b9       	out	0x05, r24	; 5
			short_delay(0xA0); // Leave it high longer than low
 136:	80 ea       	ldi	r24, 0xA0	; 160
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <short_delay>
			PORTB &= 0; // Clear PB0
 13e:	85 b1       	in	r24, 0x05	; 5
 140:	15 b8       	out	0x05, r1	; 5
 142:	09 c0       	rjmp	.+18     	; 0x156 <send_pixel+0x50>
		}
		else // Send a 0
		{
			PORTB |= (1<<0); // Set PB0
 144:	85 b1       	in	r24, 0x05	; 5
 146:	81 60       	ori	r24, 0x01	; 1
 148:	85 b9       	out	0x05, r24	; 5
			PORTB &= 0; // Clear PB0
 14a:	85 b1       	in	r24, 0x05	; 5
 14c:	15 b8       	out	0x05, r1	; 5
			short_delay(0x10); // Leave it low longer than high
 14e:	80 e1       	ldi	r24, 0x10	; 16
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <short_delay>
}

// send RGB for a single NeoPixel
void send_pixel(unsigned char red, unsigned char green, unsigned char blue)
{
	for(int i = 7; i >= 0; i--) // Loop for each bit in the Green Byte
 156:	21 97       	sbiw	r28, 0x01	; 1
 158:	dd 23       	and	r29, r29
 15a:	04 f7       	brge	.-64     	; 0x11c <send_pixel+0x16>
 15c:	c7 e0       	ldi	r28, 0x07	; 7
 15e:	d0 e0       	ldi	r29, 0x00	; 0
 160:	1e c0       	rjmp	.+60     	; 0x19e <send_pixel+0x98>
		}
	}

	for(int i = 7; i >= 0; i--) // Loop for each bit in the Red Byte
	{
		if(red & (1<<i))// Send a 1
 162:	80 2f       	mov	r24, r16
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0c 2e       	mov	r0, r28
 168:	02 c0       	rjmp	.+4      	; 0x16e <send_pixel+0x68>
 16a:	95 95       	asr	r25
 16c:	87 95       	ror	r24
 16e:	0a 94       	dec	r0
 170:	e2 f7       	brpl	.-8      	; 0x16a <send_pixel+0x64>
 172:	80 ff       	sbrs	r24, 0
 174:	0a c0       	rjmp	.+20     	; 0x18a <send_pixel+0x84>
		{
			PORTB |= (1<<0); // Set PB0
 176:	85 b1       	in	r24, 0x05	; 5
 178:	81 60       	ori	r24, 0x01	; 1
 17a:	85 b9       	out	0x05, r24	; 5
			short_delay(0xA0); // Leave it high longer than low
 17c:	80 ea       	ldi	r24, 0xA0	; 160
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <short_delay>
			PORTB &= 0; // Clear PB0
 184:	85 b1       	in	r24, 0x05	; 5
 186:	15 b8       	out	0x05, r1	; 5
 188:	09 c0       	rjmp	.+18     	; 0x19c <send_pixel+0x96>
		}
		else // Send a 0
		{
			PORTB |= (1<<0); // Set PB0
 18a:	85 b1       	in	r24, 0x05	; 5
 18c:	81 60       	ori	r24, 0x01	; 1
 18e:	85 b9       	out	0x05, r24	; 5
			PORTB &= 0; // Clear PB0
 190:	85 b1       	in	r24, 0x05	; 5
 192:	15 b8       	out	0x05, r1	; 5
			short_delay(0x10); // Leave it low longer than high
 194:	80 e1       	ldi	r24, 0x10	; 16
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <short_delay>
			PORTB &= 0; // Clear PB0
			short_delay(0x10); // Leave it low longer than high
		}
	}

	for(int i = 7; i >= 0; i--) // Loop for each bit in the Red Byte
 19c:	21 97       	sbiw	r28, 0x01	; 1
 19e:	dd 23       	and	r29, r29
 1a0:	04 f7       	brge	.-64     	; 0x162 <send_pixel+0x5c>
 1a2:	c7 e0       	ldi	r28, 0x07	; 7
 1a4:	d0 e0       	ldi	r29, 0x00	; 0
 1a6:	1e c0       	rjmp	.+60     	; 0x1e4 <send_pixel+0xde>
		}
	}

	for(int i = 7; i >= 0; i--) // Loop for each bit in the Blue Byte
	{
		if(blue & (1<<i))// Send a 1
 1a8:	81 2f       	mov	r24, r17
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0c 2e       	mov	r0, r28
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <send_pixel+0xae>
 1b0:	95 95       	asr	r25
 1b2:	87 95       	ror	r24
 1b4:	0a 94       	dec	r0
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <send_pixel+0xaa>
 1b8:	80 ff       	sbrs	r24, 0
 1ba:	0a c0       	rjmp	.+20     	; 0x1d0 <send_pixel+0xca>
		{
			PORTB |= (1<<0); // Set PB0
 1bc:	85 b1       	in	r24, 0x05	; 5
 1be:	81 60       	ori	r24, 0x01	; 1
 1c0:	85 b9       	out	0x05, r24	; 5
			short_delay(0xA0); // Leave it high longer than low
 1c2:	80 ea       	ldi	r24, 0xA0	; 160
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <short_delay>
			PORTB &= 0; // Clear PB0
 1ca:	85 b1       	in	r24, 0x05	; 5
 1cc:	15 b8       	out	0x05, r1	; 5
 1ce:	09 c0       	rjmp	.+18     	; 0x1e2 <send_pixel+0xdc>
		}
		else // Send a 0
		{
			PORTB |= (1<<0); // Set PB0
 1d0:	85 b1       	in	r24, 0x05	; 5
 1d2:	81 60       	ori	r24, 0x01	; 1
 1d4:	85 b9       	out	0x05, r24	; 5
			PORTB &= 0; // Clear PB0
 1d6:	85 b1       	in	r24, 0x05	; 5
 1d8:	15 b8       	out	0x05, r1	; 5
			short_delay(0x10); // Leave it low longer than high
 1da:	80 e1       	ldi	r24, 0x10	; 16
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <short_delay>
			PORTB &= 0; // Clear PB0
			short_delay(0x10); // Leave it low longer than high
		}
	}

	for(int i = 7; i >= 0; i--) // Loop for each bit in the Blue Byte
 1e2:	21 97       	sbiw	r28, 0x01	; 1
 1e4:	dd 23       	and	r29, r29
 1e6:	04 f7       	brge	.-64     	; 0x1a8 <send_pixel+0xa2>
			PORTB &= 0; // Clear PB0
			short_delay(0x10); // Leave it low longer than high
		}
	}

}
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	1f 91       	pop	r17
 1ee:	0f 91       	pop	r16
 1f0:	ff 90       	pop	r15
 1f2:	08 95       	ret

Disassembly of section .text.update_pixels:

0000024a <update_pixels>:
	return;
}

// update all RGB NeoPixel values
void update_pixels()
{
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
	for (int i = 9; i > -1; i--) // Loop through for each NeoPixel
 24e:	c9 e0       	ldi	r28, 0x09	; 9
 250:	d0 e0       	ldi	r29, 0x00	; 0
 252:	0c c0       	rjmp	.+24     	; 0x26c <update_pixels+0x22>
	{
		send_pixel(neo_arr.r[i], neo_arr.g[i], neo_arr.b[i]); // Send a single 24 bit value for RGB
 254:	fe 01       	movw	r30, r28
 256:	e0 50       	subi	r30, 0x00	; 0
 258:	ff 4f       	sbci	r31, 0xFF	; 255
 25a:	44 89       	ldd	r20, Z+20	; 0x14
 25c:	62 85       	ldd	r22, Z+10	; 0x0a
 25e:	80 81       	ld	r24, Z
 260:	50 e0       	ldi	r21, 0x00	; 0
 262:	70 e0       	ldi	r23, 0x00	; 0
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 83 00 	call	0x106	; 0x106 <__data_load_end>
}

// update all RGB NeoPixel values
void update_pixels()
{
	for (int i = 9; i > -1; i--) // Loop through for each NeoPixel
 26a:	21 97       	sbiw	r28, 0x01	; 1
 26c:	dd 23       	and	r29, r29
 26e:	94 f7       	brge	.-28     	; 0x254 <update_pixels+0xa>
	{
		send_pixel(neo_arr.r[i], neo_arr.g[i], neo_arr.b[i]); // Send a single 24 bit value for RGB
	}

	return;
}
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	08 95       	ret

Disassembly of section .text.neopixel_init:

000001f4 <neopixel_init>:
}

// initialize NeoPixels
void neopixel_init()
{
	DDRB |= 0x01; // Set PB0 to an input
 1f4:	84 b1       	in	r24, 0x04	; 4
 1f6:	81 60       	ori	r24, 0x01	; 1
 1f8:	84 b9       	out	0x04, r24	; 4
	PORTB &= 0; // Output 0x00 to PORTB
 1fa:	85 b1       	in	r24, 0x05	; 5
 1fc:	15 b8       	out	0x05, r1	; 5
	neo_arr.r[0] = 0x30;
 1fe:	e0 e0       	ldi	r30, 0x00	; 0
 200:	f1 e0       	ldi	r31, 0x01	; 1
 202:	20 e3       	ldi	r18, 0x30	; 48
 204:	20 83       	st	Z, r18
	neo_arr.g[0] = 0x00;
 206:	12 86       	std	Z+10, r1	; 0x0a
	neo_arr.b[0] = 0x00;
 208:	14 8a       	std	Z+20, r1	; 0x14
	neo_arr.r[1] = 0x30;
 20a:	21 83       	std	Z+1, r18	; 0x01
	neo_arr.g[1] = 0x10;
 20c:	80 e1       	ldi	r24, 0x10	; 16
 20e:	83 87       	std	Z+11, r24	; 0x0b
	neo_arr.b[1] = 0x00;
 210:	15 8a       	std	Z+21, r1	; 0x15
	neo_arr.r[2] = 0x20;
 212:	90 e2       	ldi	r25, 0x20	; 32
 214:	92 83       	std	Z+2, r25	; 0x02
	neo_arr.g[2] = 0x20;
 216:	94 87       	std	Z+12, r25	; 0x0c
	neo_arr.b[2] = 0x00;
 218:	16 8a       	std	Z+22, r1	; 0x16
	neo_arr.r[3] = 0x10;
 21a:	83 83       	std	Z+3, r24	; 0x03
	neo_arr.g[3] = 0x30;
 21c:	25 87       	std	Z+13, r18	; 0x0d
	neo_arr.b[3] = 0x00;
 21e:	17 8a       	std	Z+23, r1	; 0x17
	neo_arr.r[4] = 0x00;
 220:	14 82       	std	Z+4, r1	; 0x04
	neo_arr.g[4] = 0x30;
 222:	26 87       	std	Z+14, r18	; 0x0e
	neo_arr.b[4] = 0x10;
 224:	80 8f       	std	Z+24, r24	; 0x18
	neo_arr.r[5] = 0x00;
 226:	15 82       	std	Z+5, r1	; 0x05
	neo_arr.g[5] = 0x20;
 228:	97 87       	std	Z+15, r25	; 0x0f
	neo_arr.b[5] = 0x20;
 22a:	91 8f       	std	Z+25, r25	; 0x19
	neo_arr.r[6] = 0x00;
 22c:	16 82       	std	Z+6, r1	; 0x06
	neo_arr.g[6] = 0x10;
 22e:	80 8b       	std	Z+16, r24	; 0x10
	neo_arr.b[6] = 0x30;
 230:	22 8f       	std	Z+26, r18	; 0x1a
	neo_arr.r[7] = 0x00;
 232:	17 82       	std	Z+7, r1	; 0x07
	neo_arr.g[7] = 0x00;
 234:	11 8a       	std	Z+17, r1	; 0x11
	neo_arr.b[7] = 0x30;
 236:	23 8f       	std	Z+27, r18	; 0x1b
	neo_arr.r[8] = 0x10;
 238:	80 87       	std	Z+8, r24	; 0x08
	neo_arr.g[8] = 0x00;
 23a:	12 8a       	std	Z+18, r1	; 0x12
	neo_arr.b[8] = 0x20;
 23c:	94 8f       	std	Z+28, r25	; 0x1c
	neo_arr.r[9] = 0x20;
 23e:	91 87       	std	Z+9, r25	; 0x09
	neo_arr.g[9] = 0x00;
 240:	13 8a       	std	Z+19, r1	; 0x13
	neo_arr.b[9] = 0x10;
 242:	85 8f       	std	Z+29, r24	; 0x1d
	update_pixels(); // Initial NeoPixel Colors
 244:	0e 94 25 01 	call	0x24a	; 0x24a <update_pixels>
 248:	08 95       	ret

Disassembly of section .text.main:

00000276 <main>:
};
struct rgb neo_arr;

int main(void)
{
	neopixel_init();
 276:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <neopixel_init>
	int light_level = 25;
	int temp = 50;

	while(1)
	{
		clear_pixels();
 27a:	0e 94 4c 01 	call	0x298	; 0x298 <clear_pixels>
			neo_arr.r[10] = 0;
			neo_arr.g[10] = 0;
			neo_arr.b[10] = 64;
		} else if (temp > 96) {
			// All red
			neo_arr.r[10] = 64;
 27e:	e0 e0       	ldi	r30, 0x00	; 0
 280:	f1 e0       	ldi	r31, 0x01	; 1
 282:	80 e4       	ldi	r24, 0x40	; 64
 284:	82 87       	std	Z+10, r24	; 0x0a
			neo_arr.g[10] = 0;
 286:	14 8a       	std	Z+20, r1	; 0x14
			neo_arr.b[10] = 0;
 288:	16 8e       	std	Z+30, r1	; 0x1e
		} else {
			neo_arr.r[10] = (temp-64)*2;
			neo_arr.g[10] = (-temp+96)*2;
			neo_arr.b[10] = 0;
		}
		update_pixels();
 28a:	0e 94 25 01 	call	0x24a	; 0x24a <update_pixels>
		short_delay(0xFF);
 28e:	8f ef       	ldi	r24, 0xFF	; 255
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <short_delay>
	}
 296:	f1 cf       	rjmp	.-30     	; 0x27a <main+0x4>
